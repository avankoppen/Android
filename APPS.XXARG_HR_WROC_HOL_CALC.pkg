CREATE OR REPLACE PACKAGE XXARG_HR_WROC_HOL_CALC
IS

/*******************************************************************************
*         $Header: xxarg_hr_wroc_hol_calc.pkh 115.0 23-JUN-2009 vkonda $       *
*             Copyright (c) 2009, by Wendy's Arby's Group                      *
*                                                                              *
*   Package Name     :  XXARG_HR_WROC_HOL_CALC                                 *
*   Author           :  Venky Konda                                            *
*   Description      :  This package is used to calculate holiday hours for    *
*                       hourly employees in Canada. It takes various provincial*
*                       rules to calcualte holiday hours                       *
* HISTORY                                                                      *
* Changed BY     Change Date   Version  Comments                               *
* -------------  ------------  -------  ---------------------------------------*
*  Venky          23-Jun-2009    115.0  Initial Version                        *
*                                                                              *
*******************************************************************************/

   PROCEDURE calculate_holiday (
      p_errbuff         OUT VARCHAR2,
      p_retcode         OUT NUMBER,
      p_payroll_id      NUMBER,
      p_week_end_date   VARCHAR2
   );
END xxarg_hr_wroc_hol_calc;


/
CREATE OR REPLACE PACKAGE BODY XXARG_HR_WROC_HOL_CALC
IS

/*******************************************************************************
*         $Header: xxarg_hr_wroc_hol_calc.pkb 115.0 23-JUN-2009 vkonda $       *
*             Copyright (c) 2009, by Wendy's Arby's Group                      *
*                                                                              *
*   Package Name     :  XXARG_HR_WROC_HOL_CALC                                 *
*   Author           :  Venky Konda                                            *
*   Description      :  This package is used to calculate holiday hours for    *
*                       hourly employees in Canada. It takes various provincial*
*                       rules to calcualte holiday hours                       *
* HISTORY                                                                      *
* Changed BY     Change Date   Version  Comments                               *
* -------------  ------------  -------  ---------------------------------------*
*  Venky          23-Jun-2009    115.0  Initial Version                        *
*  Venky          16-Feb-2010    115.1  Updated Alberta, Quebec to take LOA    *
*                                       into account                           *
*                                       Modified BC logic to check if employee *
*                                       worked atleast 15 days of 30 days      *
*                                       preceding holiday                      *
*******************************************************************************/
   CURSOR csr_get_hrly_emps (
      p_payroll_id      NUMBER,
      p_week_end_date   DATE,
      p_province        VARCHAR2,
      p_holiday_date    DATE
   )
   IS
      SELECT paf.person_id, paf.assignment_id, pps.date_start hire_date,
             paf.assignment_number
        FROM                                           --hxt_timecards_f HTF,
             per_all_assignments_f paf,
--             per_time_periods ptp,
             hr_locations hl,
             per_pay_bases ppb,
             per_periods_of_service pps
       WHERE paf.payroll_id = p_payroll_id
--         AND paf.payroll_id = ptp.payroll_id
         AND paf.primary_flag = 'Y'
         AND paf.assignment_type = 'E'
         AND paf.location_id = hl.location_id
         AND hl.region_1 = p_province
         AND paf.pay_basis_id = ppb.pay_basis_id
         AND paf.period_of_service_id = pps.period_of_service_id
         AND ((pps.actual_termination_date is null) or (pps.actual_termination_date between p_week_end_date -6 and p_holiday_date))
         AND ppb.NAME IN
                ('Hourly - Crew',
                 'Hourly - Store Mgmt/Office',
                 'Hourly - Shift Sprv'
                )
         AND ppb.business_group_id = paf.business_group_id
         AND p_week_end_date BETWEEN paf.effective_start_date
                                 AND paf.effective_end_date;

   g_business_group_id   NUMBER;

/*******************************************************************************
    Name         :   CHK_X_CODE
    Scope        :   LOCAL
    Descirption  :   This function returns 'Y' if the employee got a X code for
                     the specified week end date. It returns 'N' otherwise

*******************************************************************************/
   FUNCTION chk_x_code (p_person_id NUMBER, p_week_end_date DATE)
      RETURN VARCHAR2
   IS
      l_x_code_exists   VARCHAR2 (10);
   BEGIN
      SELECT 'Y'
        INTO l_x_code_exists
        FROM xxarg.xxarg_hr_time_summary_stg stg
       WHERE national_identifier =
                (SELECT national_identifier
                   FROM per_all_people_f ppf
                  WHERE person_id = p_person_id
                    AND p_week_end_date BETWEEN ppf.effective_start_date
                                            AND ppf.effective_end_date)
         AND stg.earning_code = 'X'
         AND stg.week_end_date = p_week_end_date;

      RETURN l_x_code_exists;
   EXCEPTION
      WHEN OTHERS
      THEN
         RETURN 'N';
   END chk_x_code;

/*******************************************************************************
    Name         :   CHK_EMP_ON_LOAD
    Scope        :   LOCAL
    Descirption  :   This function returns 'Y' if the person is on LOA as of
                     the effective date. It returns 'N' otherwise

*******************************************************************************/
   FUNCTION chk_emp_on_loa (p_assignment_id NUMBER, p_effective_date DATE)
   RETURN VARCHAR2
   IS
       CURSOR csr_chk_asg_status
       IS
           SELECT 'Y'
             FROM apps.per_all_assignments_f paf
            WHERE paf.assignment_id = p_assignment_id
              AND p_effective_date between paf.effective_start_date and paf.effective_end_date
              AND paf.assignment_status_type_id in(
                        select assignment_status_type_id
                          from per_assignment_status_types
                         where user_status in ('LTD Modified'
                                              ,'Maternity - Extended Leave'
                                              ,'STD Modified'
                                              ,'STD with Pay'
                                              ,'Personal Leave of Absence'
                                              ,'Unpaid Disb (Mod-Not Wrk Rel)'
                                              ,'Parental LOA'
                                              ,'Compassionate Care Leave'
                                              ,'Temporary Store Closure'
                                               )
                                            );
       l_ret_val varchar2(10) := 'N';
   BEGIN
       open csr_chk_asg_status;
          Fetch csr_chk_asg_status into l_ret_val;
       close csr_chk_asg_status;

       return nvl(l_ret_val,'N');
   END chk_emp_on_loa;

/*******************************************************************************
    Name         :   GET_OTHER_EARNINGS
    Scope        :   LOCAL
    Descirption  :   This function returns balance value for an assignment between
                     given dates

*******************************************************************************/
   FUNCTION get_other_earnings (
      p_defined_balance_id   NUMBER,
      p_assignment_id        NUMBER,
      p_date_start           DATE,
      p_date_end             DATE
   )
      RETURN NUMBER
   IS
      CURSOR csr_get_other_earnings
      IS
         SELECT SUM (prb.balance_value) total_earnings
           FROM pay_run_balances prb,
                pay_assignment_actions paa,
                pay_payroll_actions ppa
          WHERE ppa.payroll_action_id = paa.payroll_action_id
            AND paa.assignment_id = p_assignment_id
            AND paa.assignment_id = prb.assignment_id
            AND prb.defined_balance_id = p_defined_balance_id
            AND prb.assignment_action_id = paa.assignment_action_id
            AND ppa.date_earned BETWEEN p_date_start AND p_date_end;

      l_other_earnings   NUMBER;
   BEGIN
      OPEN csr_get_other_earnings;

      FETCH csr_get_other_earnings
       INTO l_other_earnings;

      CLOSE csr_get_other_earnings;

      RETURN NVL (l_other_earnings, 0);
   END get_other_earnings;


/*******************************************************************************
    Name         :   GET_ASSIGNMENT_ID
    Scope        :   LOCAL
    Descirption  :   This function returns assignment_id corresponding to the
                     person_id

*******************************************************************************/
   FUNCTION get_assignment_id (p_person_id NUMBER, p_week_end_date DATE)
      RETURN NUMBER
   IS
      CURSOR csr_get_asg_id
      IS
         SELECT paf.assignment_id
           FROM apps.per_all_assignments_f paf
          WHERE paf.person_id = p_person_id
            AND paf.assignment_type = 'E'
            AND paf.primary_flag = 'Y'
            AND p_week_end_date BETWEEN paf.effective_start_date
                                    AND paf.effective_end_date;

      l_assignment_id   NUMBER;
   BEGIN
      OPEN csr_get_asg_id;

      FETCH csr_get_asg_id
       INTO l_assignment_id;

      CLOSE csr_get_asg_id;

      RETURN l_assignment_id;
   END get_assignment_id;

/*******************************************************************************
    Name         :   GET_DEFINED_BAL_ID
    Scope        :   LOCAL
    Descirption  :   Get the defined balance id corresponding to the given
                     balance name and database item suffix

*******************************************************************************/

   FUNCTION get_defined_bal_id (
      p_balance_name           VARCHAR2,
      p_database_item_suffix   VARCHAR2
   )
      RETURN NUMBER
   IS
      CURSOR csr_get_def_bal_id
      IS
         SELECT pdb.defined_balance_id
           FROM pay_balance_types pbt,
                pay_balance_dimensions pbd,
                pay_defined_balances pdb
          WHERE pbt.balance_name = p_balance_name
            AND pbd.database_item_suffix = p_database_item_suffix
            AND pbd.legislation_code = 'CA'
            AND pdb.balance_type_id = pbt.balance_type_id
            AND pdb.balance_dimension_id = pbd.balance_dimension_id;

      l_def_bal_id   NUMBER;
   BEGIN
      OPEN csr_get_def_bal_id;

      FETCH csr_get_def_bal_id
       INTO l_def_bal_id;

      CLOSE csr_get_def_bal_id;

      RETURN l_def_bal_id;
   END get_defined_bal_id;

/*******************************************************************************
    Name         :   GET_PAY_RATE
    Scope        :   LOCAL
    Descirption  :   Get the pay rate of the assignment as of the effective date

*******************************************************************************/

   FUNCTION get_pay_rate (p_assignment_id NUMBER, p_effective_date DATE)
      RETURN NUMBER
   IS
      CURSOR csr_get_pay_rate
      IS
         SELECT ppp.proposed_salary_n
           FROM per_pay_proposals ppp
          WHERE assignment_id = p_assignment_id
            AND p_effective_date BETWEEN ppp.change_date AND ppp.date_to;

      l_pay_rate   NUMBER;
   BEGIN
      OPEN csr_get_pay_rate;

      FETCH csr_get_pay_rate
       INTO l_pay_rate;

      CLOSE csr_get_pay_rate;

      RETURN l_pay_rate;
   END get_pay_rate;

/*******************************************************************************
    Name         :   CREATE_HOLIDAY
    Scope        :   LOCAL
    Descirption  :   Procedure to create holiday entry in the timecard for the
                     given assignment, holiday date and hours

*******************************************************************************/

   PROCEDURE create_holiday (
      p_assignment_id            NUMBER,
      p_hol_date                 DATE,
      p_hours                    NUMBER,
      p_retcode         IN OUT   NUMBER
   )
   IS
      CURSOR csr_get_tc_det
      IS
         SELECT HTF.ID tim_id, pbh.batch_name, pbh.batch_reference,
                HTF.for_person_id, paf.assignment_number,
                paf.business_group_id
           FROM hxt_timecards_f HTF,
                per_all_assignments_f paf,
                per_time_periods ptp,
                pay_batch_headers pbh
          WHERE HTF.for_person_id = paf.person_id
            AND paf.payroll_id = ptp.payroll_id
            AND HTF.batch_id = pbh.batch_id
            AND paf.primary_flag = 'Y'
            AND paf.assignment_type = 'E'
            AND ptp.time_period_id = HTF.time_period_id
            AND paf.assignment_id = p_assignment_id
            AND p_hol_date BETWEEN ptp.start_date AND ptp.end_date
            AND p_hol_date BETWEEN paf.effective_start_date
                               AND paf.effective_end_date
            AND HTF.effective_end_date = hr_general.end_of_time;

      CURSOR csr_get_asg_det (p_assignment_id NUMBER)
      IS
         SELECT person_id, business_group_id, payroll_id
           FROM per_all_assignments_f paf
          WHERE paf.assignment_id = p_assignment_id
            AND p_hol_date BETWEEN paf.effective_start_date
                               AND paf.effective_end_date;

      CURSOR csr_get_batch_det (p_payroll_id NUMBER)
      IS
         SELECT pbh.batch_reference, pbh.batch_name, pbh.batch_id
           FROM hxt_timecards_f HTF, pay_batch_headers pbh
          WHERE HTF.payroll_id = p_payroll_id
            AND HTF.time_period_id =
                   (SELECT time_period_id
                      FROM per_time_periods ptp
                     WHERE ptp.payroll_id = HTF.payroll_id
                       AND p_hol_date BETWEEN ptp.start_date AND ptp.end_date)
            AND HTF.batch_id = pbh.batch_id;

      l_tc_det       csr_get_tc_det%ROWTYPE;
      l_asg_det      csr_get_asg_det%ROWTYPE;
      l_batch_det    csr_get_batch_det%ROWTYPE;
      l_tim_sum_id   NUMBER;
      l_otm_error    VARCHAR2 (1000);
      l_orc_error    VARCHAR2 (1000);
   BEGIN
      OPEN csr_get_tc_det;

      FETCH csr_get_tc_det
       INTO l_tc_det;

      IF (csr_get_tc_det%NOTFOUND)
      THEN
         OPEN csr_get_asg_det (p_assignment_id);

         FETCH csr_get_asg_det
          INTO l_asg_det;

         CLOSE csr_get_asg_det;

         OPEN csr_get_batch_det (l_asg_det.payroll_id);

         FETCH csr_get_batch_det
          INTO l_batch_det;

         CLOSE csr_get_batch_det;
      END IF;

      CLOSE csr_get_tc_det;

      hxt_time_collection.record_time
                       (timecard_source                => 'Time Store',
                        batch_ref                      => NVL
                                                             (l_tc_det.batch_reference,
                                                              l_batch_det.batch_reference
                                                             ),
                        batch_name                     => NVL
                                                             (l_tc_det.batch_name,
                                                              l_batch_det.batch_name
                                                             ),
                        approver_number                => NULL,
                        employee_number                => NVL
                                                             (l_tc_det.for_person_id,
                                                              l_asg_det.person_id
                                                             ),
                        --l_emp_det.employee_number,
                        date_worked                    => p_hol_date,
                        start_time                     => NULL,
                        end_time                       => NULL,
                        hours                          => p_hours,
                        wage_code                      => NULL,
                        earning_policy                 => NULL,
                        hours_type                     => 'HOL',
                        earn_reason_code               => NULL,
                        project                        => NULL,
                        task_number                    => NULL,
                        location_code                  => NULL,
                        COMMENT                        => NULL,
                        rate_multiple                  => NULL,
                        hourly_rate                    => NULL,
                        amount                         => NULL,
                        separate_check_flag            => NULL,
                        business_group_id              => NVL
                                                             (l_tc_det.business_group_id,
                                                              l_asg_det.business_group_id
                                                             ),
                        concat_cost_segments           => NULL,
                        cost_segment1                  => NULL,
                        cost_segment2                  => NULL,
                        cost_segment3                  => NULL,
                        cost_segment4                  => NULL,
                        cost_segment5                  => NULL,
                        cost_segment6                  => NULL,
                        cost_segment7                  => NULL,
                        cost_segment8                  => NULL,
                        cost_segment9                  => NULL,
                        cost_segment10                 => NULL,
                        cost_segment11                 => NULL,
                        cost_segment12                 => NULL,
                        cost_segment13                 => NULL,
                        cost_segment14                 => NULL,
                        cost_segment15                 => NULL,
                        cost_segment16                 => NULL,
                        cost_segment17                 => NULL,
                        cost_segment18                 => NULL,
                        cost_segment19                 => NULL,
                        cost_segment20                 => NULL,
                        cost_segment21                 => NULL,
                        cost_segment22                 => NULL,
                        cost_segment23                 => NULL,
                        cost_segment24                 => NULL,
                        cost_segment25                 => NULL,
                        cost_segment26                 => NULL,
                        cost_segment27                 => NULL,
                        cost_segment28                 => NULL,
                        cost_segment29                 => NULL,
                        cost_segment30                 => NULL,
                        time_summary_id                => NULL,
                        tim_sum_eff_start_date         => NULL,
                        tim_sum_eff_end_date           => NULL,
                        created_by                     => fnd_global.user_id,
                        last_updated_by                => fnd_global.user_id,
                        last_update_login              => fnd_global.login_id,
                        writesum_yn                    => 'Y',
                        explode_yn                     => 'Y',
                        delete_yn                      => 'N',
                        dt_update_mode                 => NULL,
                        created_tim_sum_id             => l_tim_sum_id,
                        otm_error                      => l_otm_error,
                        oracle_error                   => l_orc_error,
                        p_time_building_block_id       => NULL,
                        p_time_building_block_ovn      => NULL,
                        p_validate                     => FALSE,
                        p_state_name                   => NULL,
                        p_county_name                  => NULL,
                        p_city_name                    => NULL,
                        p_zip_code                     => NULL
                       );

      IF (l_tim_sum_id IS NULL)
      THEN
         p_retcode := 1;
         fnd_file.put_line
                        (fnd_file.LOG,
                            'Error creating holiday entry for the assignment'
                         || l_tc_det.assignment_number
                         || ' with '
                         || p_hours
                         || l_orc_error
                         || l_otm_error
                        );
      END IF;
   END create_holiday;

/*******************************************************************************
    Name         :   INSERT_HOL_STG
    Scope        :   LOCAL
    Descirption  :   Insert holiday calculation details for the employee into
                     temperory table that will be used by reports

*******************************************************************************/
   PROCEDURE insert_hol_stg (
      p_person_id          NUMBER,
      p_holiday_date       DATE,
      p_eligible_holiday   VARCHAR2,
      p_missed_sched       VARCHAR2,
      p_averaging_period   NUMBER,
      p_hours_worked       NUMBER,
      p_days_worked        NUMBER,
      p_average_hours      NUMBER,
      p_hourly_rate        NUMBER,
      p_holiday_hours      NUMBER
   )
   IS
   BEGIN
      INSERT INTO xxarg.xxarg_hr_wroc_hol_hrs
                  (person_id, holiday_date, eligible_holidays,
                   missed_sched, averaging_period, hours_worked,
                   days_worked, average_hours, hourly_rate,
                   holiday_hours
                  )
           VALUES (p_person_id, p_holiday_date, p_eligible_holiday,
                   p_missed_sched, p_averaging_period, p_hours_worked,
                   p_days_worked, p_average_hours, p_hourly_rate,
                   p_holiday_hours
                  );
   END insert_hol_stg;

/*******************************************************************************
    Name         :   GET_ORC_CALC_DATES
    Scope        :   LOCAL
    Descirption  :   This procedure will be used to derive the Oracle calculation
                     dates. This procedure will be mainly used during the first few
                     pay periods of 2010. Since 2009 data is stored in staging
                     tables, we use this procedure to derive the dates that can
                     be used in Oracle
*******************************************************************************/

   PROCEDURE get_orc_calc_dates (
      p_payroll_id                        NUMBER,
      p_calculation_start_date   IN OUT   DATE,
      p_calculation_end_date     IN OUT   DATE,
      p_orc_calc_start_date      OUT      DATE,
      p_orc_calc_end_date        OUT      DATE
   )
   IS
      CURSOR csr_get_min_orc_start_date
      IS
         SELECT MIN (start_date)
           FROM per_time_periods
          WHERE payroll_id = p_payroll_id
            AND regular_payment_date >= '01-Jan-2010';

      l_min_start_date   DATE;
   BEGIN
      OPEN csr_get_min_orc_start_date;

      FETCH csr_get_min_orc_start_date
       INTO l_min_start_date;

      CLOSE csr_get_min_orc_start_date;

      IF (p_calculation_end_date < l_min_start_date)
      THEN
         p_orc_calc_start_date := NULL;
         p_orc_calc_end_date := NULL;
         p_calculation_start_date := p_calculation_start_date;
         p_calculation_end_date := p_calculation_end_date;
      ELSIF (p_calculation_start_date < l_min_start_date)
      THEN
         p_orc_calc_start_date := l_min_start_date;
         p_orc_calc_end_date := p_calculation_end_date;
         p_calculation_start_date := p_calculation_start_date;
         p_calculation_end_date :=
                         LEAST (l_min_start_date - 1, p_calculation_end_date);
      ELSE
         p_orc_calc_start_date := p_calculation_start_date;
         p_orc_calc_end_date := p_calculation_end_date;
         p_calculation_start_date := NULL;
         p_calculation_end_date := NULL;
      END IF;
   END get_orc_calc_dates;

/*******************************************************************************
    Name         :   CALCULATE_AB_HOLIDAY
    Scope        :   LOCAL
    Descirption  :   This procedure is used to derive holiday hours for employees
                     in the given payroll and Alberta province

*******************************************************************************/
   PROCEDURE calculate_ab_holiday (
      p_payroll_id                   NUMBER,
      p_province                     VARCHAR2,
      p_week_end_date                DATE,
      p_holiday_date                 DATE,
      p_business_group_id            NUMBER,
      p_retcode             IN OUT   NUMBER
   )
   IS
      CURSOR csr_get_hours_worked (
         p_assignment_id   NUMBER,
         p_start_date      DATE,
         p_end_date        DATE,
         p_holiday_date    DATE
      )
      IS
         SELECT SUM (hsw.hours) total_hrs
           FROM hxt_sum_hours_worked_f hsw
          WHERE hsw.assignment_id = p_assignment_id
            AND hsw.date_worked BETWEEN p_start_date AND p_end_date
            AND hsw.effective_end_date = hr_general.end_of_time
            AND TO_CHAR (hsw.date_worked, 'D') = TO_CHAR (p_holiday_date, 'D')
            AND (   hsw.element_type_id IS NULL
                 OR hsw.element_type_id IN (
                       SELECT element_type_id pet
                         FROM pay_element_types_f pet
                        WHERE element_name IN ('REG', 'TRN')
                          AND pet.business_group_id = p_business_group_id
                          AND hsw.date_worked BETWEEN pet.effective_start_date
                                                  AND pet.effective_end_date)
                );

      CURSOR csr_get_days_worked (
         p_assignment_id   NUMBER,
         p_start_date      DATE,
         p_end_date        DATE,
         p_holiday_date    DATE
      )
      IS
         SELECT COUNT (DISTINCT hsw.date_worked) days_worked
           FROM hxt_sum_hours_worked_f hsw
          WHERE hsw.assignment_id = p_assignment_id
            AND hsw.date_worked BETWEEN p_start_date AND p_end_date
            AND hsw.effective_end_date = hr_general.end_of_time
            AND TO_CHAR (hsw.date_worked, 'D') = TO_CHAR (p_holiday_date, 'D')
            AND (   hsw.element_type_id IS NULL
                 OR hsw.element_type_id IN (
                       SELECT heg.element_type_id
                         FROM hxt_earn_groups heg,
                              hxt_earning_policies hep,
                              hxt_add_assign_info_f haai
                        WHERE haai.assignment_id = p_assignment_id
                          AND haai.earning_policy = hep.ID
                          AND hep.egt_id = heg.egt_id
                          AND hsw.date_worked BETWEEN haai.effective_start_date
                                                  AND haai.effective_end_date)
                );

      CURSOR csr_get_stg_hours (
         p_person_id      NUMBER,
         p_start_date     DATE,
         p_end_date       DATE,
         p_holiday_date   DATE
      )
      IS
         SELECT NVL (SUM (hours), 0) total_hours
           FROM xxarg.xxarg_hr_wroc_hol_dtl_stg stg,
                per_all_people_f ppf,
                xxarg.xxarg_hr_tas_mapping_codes map_codes
          WHERE stg.national_identifier = ppf.national_identifier
            AND ppf.person_id = p_person_id
            AND p_end_date BETWEEN ppf.effective_start_date
                               AND ppf.effective_end_date
            AND stg.date_worked BETWEEN p_start_date AND p_end_date
            AND TO_CHAR (stg.date_worked, 'D') = TO_CHAR (p_holiday_date, 'D')
            AND stg.record_type = 'T'
            AND stg.earning_code = map_codes.earning_code
            AND map_codes.system_source = 'CWS'
            AND map_codes.orc_earn_code1 IN ('REG', 'TRN');

      CURSOR csr_get_stg_days_worked (
         p_person_id      NUMBER,
         p_start_date     DATE,
         p_end_date       DATE,
         p_holiday_date   DATE
      )
      IS
         SELECT COUNT (DISTINCT date_worked) stg_hours_worked
           FROM xxarg.xxarg_hr_wroc_hol_dtl_stg stg,
                per_all_people_f ppf,
                xxarg.xxarg_hr_tas_mapping_codes map_codes
          WHERE stg.national_identifier = ppf.national_identifier
            AND ppf.person_id = p_person_id
            AND p_end_date BETWEEN ppf.effective_start_date
                               AND ppf.effective_end_date
            AND stg.date_worked BETWEEN p_start_date AND p_end_date
            AND TO_CHAR (stg.date_worked, 'D') = TO_CHAR (p_holiday_date, 'D')
            AND stg.record_type = 'T'
            AND stg.earning_code = map_codes.earning_code
            AND map_codes.system_source = 'CWS'
            AND map_codes.orc_earn_code1 IN ('REG', 'TRN');

      l_x_code_exists            VARCHAR2 (10);
      l_assignment_id            NUMBER;
      l_total_hours_worked       NUMBER;
      l_days_worked              NUMBER;
      l_holiday_hours            NUMBER;
      l_calculation_start_date   DATE;
      l_calculation_end_date     DATE;
      l_orc_calc_start_date      DATE;
      l_orc_calc_end_date        DATE;
      l_total_stg_hours          NUMBER;
      l_total_stg_days           NUMBER;
      l_missed_sched             VARCHAR2(1);
      l_pay_rate                 NUMBER;
      l_elig_flag                VARCHAR2(1);
   BEGIN
      l_calculation_start_date := p_holiday_date - (7 * 9);
      l_calculation_end_date := p_holiday_date - 1;
      get_orc_calc_dates
                       (p_payroll_id                  => p_payroll_id,
                        p_calculation_start_date      => l_calculation_start_date,
                        p_calculation_end_date        => l_calculation_end_date,
                        p_orc_calc_start_date         => l_orc_calc_start_date,
                        p_orc_calc_end_date           => l_orc_calc_end_date
                       );

      FOR tcs IN csr_get_hrly_emps (p_payroll_id, p_week_end_date, p_province, p_holiday_date)
      LOOP


               -- Get the total number of hours worked in the past 9 weeks
               -- on the holiday day
               l_assignment_id :=
                  get_assignment_id (p_person_id          => tcs.person_id,
                                     p_week_end_date      => p_week_end_date
                                    );
               -- If calcualtion date is not null then we need to look at staging tables to get hours and number of days worked
                  -- Get the actual oracle calculation dates
               l_total_stg_hours := 0;
               l_total_stg_days := 0;
               l_total_hours_worked := 0;
               l_days_worked := 0;

               IF (l_calculation_start_date IS NOT NULL)
               THEN
                  OPEN csr_get_stg_hours (tcs.person_id,
                                          l_calculation_start_date,
                                          l_calculation_end_date,
                                          p_holiday_date
                                         );

                  FETCH csr_get_stg_hours
                   INTO l_total_stg_hours;

                  CLOSE csr_get_stg_hours;


                  OPEN csr_get_stg_days_worked (tcs.person_id,
                                                l_calculation_start_date,
                                                l_calculation_end_date,
                                                p_holiday_date
                                               );

                  FETCH csr_get_stg_days_worked
                   INTO l_total_stg_days;

                  CLOSE csr_get_stg_days_worked;
               END IF;

               IF (l_assignment_id IS NOT NULL)
               THEN
                  OPEN csr_get_hours_worked (l_assignment_id,
                                             l_orc_calc_start_date,
                                             l_orc_calc_end_date,
                                             p_holiday_date
                                            );

                  FETCH csr_get_hours_worked
                   INTO l_total_hours_worked;

                  CLOSE csr_get_hours_worked;

                  OPEN csr_get_days_worked (l_assignment_id,
                                            l_orc_calc_start_date,
                                            l_orc_calc_end_date,
                                            p_holiday_date
                                           );

                  FETCH csr_get_days_worked
                   INTO l_days_worked;

                  CLOSE csr_get_days_worked;

                  -- Holiday Hours := avergage of the total hours worked on the holiday day in past 9 weeks / number of days worked
                  IF (NVL (l_days_worked, 0) + NVL (l_total_stg_days, 0) > 0)
                  THEN
                     l_holiday_hours :=
                          (  NVL (l_total_hours_worked, 0)
                           + NVL (l_total_stg_hours, 0)
                          )
                        / (NVL (l_days_worked, 0) + NVL (l_total_stg_days, 0)
                          );
                  ELSE
                     l_holiday_hours := 0;
                  END IF;

            -- Check if there was an 'x' code in the cws file
            l_x_code_exists := chk_x_code (tcs.person_id, p_week_end_date);

            IF (l_x_code_exists = 'N')
            THEN
               l_missed_sched := NULL;
            ELSE
               l_missed_sched := 'Y';
            END IF;

         -- Check if the person is employed for atleast 30 days
         IF ((p_holiday_date - tcs.hire_date) >= 30) AND (chk_emp_on_loa(tcs.assignment_id,p_holiday_date - 14) = 'N')
         THEN
            l_elig_flag := 'Y';
         ELSE
            l_elig_flag := 'N';
            l_holiday_hours := 0;
         END IF;
         l_pay_rate :=
            get_pay_rate (p_assignment_id       => l_assignment_id,
                          p_effective_date      => p_week_end_date
                         );

            insert_hol_stg (p_person_id             => tcs.person_id,
                            p_holiday_date          => p_holiday_date,
                            p_eligible_holiday      => l_elig_flag,
                            p_missed_sched          => l_missed_sched,
                            p_averaging_period      => 63,
                            p_hours_worked          =>   (  NVL (l_total_hours_worked, 0)
                           + NVL (l_total_stg_hours, 0)
                          ),
                            p_days_worked           =>   NVL (l_days_worked, 0) + NVL (l_total_stg_days, 0),
                            p_average_hours         => ROUND (l_holiday_hours,
                                                              2
                                                             ),
                            p_hourly_rate           => l_pay_rate,
                            p_holiday_hours         => ROUND (l_holiday_hours,
                                                              2
                                                             )
                           );

                  IF NVL (l_holiday_hours, 0) > 0
                  THEN
                     -- Create holiday time entry for the person
                     create_holiday (p_assignment_id      => l_assignment_id,
                                     p_hol_date           => p_holiday_date,
                                     p_hours              => l_holiday_hours,
                                     p_retcode            => p_retcode
                                    );
                  END IF;
                  END IF;


      END LOOP;
   END calculate_ab_holiday;
   
/*******************************************************************************
    Name         :   CALCULATE_ON_HOLIDAY
    Scope        :   LOCAL
    Descirption  :   This procedure is used to derive holiday hours for employees
                     in the given payroll and Ontario province

*******************************************************************************/

   PROCEDURE calculate_on_holiday (
      p_payroll_id                   NUMBER,
      p_province                     VARCHAR2,
      p_week_end_date                DATE,
      p_holiday_date                 DATE,
      p_business_group_id            NUMBER,
      p_retcode             IN OUT   NUMBER
   )
   IS
      CURSOR csr_get_hours_worked (
         p_assignment_id   NUMBER,
         p_start_date      DATE,
         p_end_date        DATE,
         p_holiday_date    DATE
      )
      IS
         SELECT SUM (hsw.hours) total_hrs
           FROM hxt_sum_hours_worked_f hsw
          WHERE hsw.assignment_id = p_assignment_id
            AND hsw.date_worked BETWEEN p_start_date AND p_end_date
            AND hsw.effective_end_date = hr_general.end_of_time
            AND (   hsw.element_type_id IS NULL
                 OR hsw.element_type_id IN (
                       SELECT element_type_id
                         FROM pay_element_types_f pet
                        WHERE pet.element_name IN ('REG', 'TRN')
                          AND pet.business_group_id = p_business_group_id
                          AND hsw.date_worked BETWEEN pet.effective_start_date
                                                  AND pet.effective_end_date)
                );

      CURSOR csr_get_open_period
      IS
         SELECT week1_start_date
           FROM xxarg.xxarg_hr_otl_ctrl_tbl ctrl_tbl
          WHERE ctrl_tbl.payroll_id = p_payroll_id AND payroll_run = 'N';

      CURSOR csr_get_stg_hrs_worked (
         p_person_id    NUMBER,
         p_start_date   DATE,
         p_end_date     DATE
      )
      IS
         SELECT SUM (hours) stg_hours_worked
           FROM xxarg.xxarg_hr_wroc_hol_dtl_stg stg,
                per_all_people_f ppf,
                xxarg.xxarg_hr_tas_mapping_codes map_codes
          WHERE stg.national_identifier = ppf.national_identifier
            AND ppf.person_id = p_person_id
            AND p_end_date BETWEEN ppf.effective_start_date
                               AND ppf.effective_end_date
            AND stg.date_worked BETWEEN p_start_date AND p_end_date
            AND stg.record_type = 'T'
            AND stg.earning_code = map_codes.earning_code
            AND map_codes.system_source = 'CWS'
            AND map_codes.orc_earn_code1 IN ('REG', 'TRN');

      CURSOR csr_get_stg_earns (
         p_person_id    NUMBER,
         p_start_date   DATE,
         p_end_date     DATE
      )
      IS
         SELECT SUM (earnings) stg_earns
           FROM xxarg.xxarg_hr_wroc_hol_earn_stg stg, per_all_people_f ppf
          WHERE TRIM (stg.employee_number) = ppf.employee_number
            AND ppf.person_id = p_person_id
            AND p_end_date BETWEEN ppf.effective_start_date
                               AND ppf.effective_end_date
            AND stg.date_earned BETWEEN p_start_date AND p_end_date
            AND stg.earning_code IN ('BNR', 'RTR', 'VRC');

      l_x_code_exists         VARCHAR2 (10);
      l_assignment_id         NUMBER;
      l_total_hours_worked    NUMBER;
      l_days_worked           NUMBER;
      l_holiday_hours         NUMBER;
      l_period_start_date     DATE;
      l_defined_balance_id    NUMBER;
      l_pay_rate              NUMBER;
      l_other_earnings        NUMBER;
      l_calc_start_date       DATE;
      l_calc_end_date         DATE;
      l_orc_calc_start_date   DATE;
      l_orc_calc_end_date     DATE;
      l_stg_hrs               NUMBER;
      l_stg_earns             NUMBER;
      l_missed_sched          VARCHAR2(1);
      l_elig_hol              VARCHAR2(1);
   BEGIN
      -- Get the period start date corresponding to the week end date
      OPEN csr_get_open_period;

      FETCH csr_get_open_period
       INTO l_period_start_date;

      CLOSE csr_get_open_period;

      l_calc_start_date := l_period_start_date - 28;
      l_calc_end_date := l_period_start_date - 1;
      get_orc_calc_dates (p_payroll_id                  => p_payroll_id,
                          p_calculation_start_date      => l_calc_start_date,
                          p_calculation_end_date        => l_calc_end_date,
                          p_orc_calc_start_date         => l_orc_calc_start_date,
                          p_orc_calc_end_date           => l_orc_calc_end_date
                         );
--     fnd_file.put_line(fnd_file.log,'Orc Calc Date ' || l_orc_calc_start_date || ' End ' || l_orc_calc_end_date);
--     fnd_file.put_line(fnd_file.log,'Calc St Date ' || l_calc_start_date || ' End ' || l_calc_end_date);
      -- Get defined balance id corresponding to
      l_defined_balance_id :=
                       get_defined_bal_id ('WROC_ON_EARN_HOL', '_ASG_GRE_RUN');

      FOR tcs IN csr_get_hrly_emps (p_payroll_id, p_week_end_date, p_province,p_holiday_date)
      LOOP
         l_assignment_id := tcs.assignment_id;
         -- Check if there was an 'x' code in the cws file
         l_x_code_exists := chk_x_code (tcs.person_id, p_week_end_date);


            -- Get the total number of hours worked in the past two pay periods
            l_stg_hrs := 0;
            l_stg_earns := 0;

            IF (l_calc_start_date IS NOT NULL)
            THEN

               OPEN csr_get_stg_hrs_worked (tcs.person_id,
                                            l_calc_start_date,
                                            l_calc_end_date
                                           );

               FETCH csr_get_stg_hrs_worked
                INTO l_stg_hrs;

               CLOSE csr_get_stg_hrs_worked;

               OPEN csr_get_stg_earns (tcs.person_id,
                                       l_calc_start_date,
                                       l_calc_end_date
                                      );

               FETCH csr_get_stg_earns
                INTO l_stg_earns;

               CLOSE csr_get_stg_earns;
            END IF;

            OPEN csr_get_hours_worked (l_assignment_id,
                                       l_orc_calc_start_date,
                                       l_orc_calc_end_date,
                                       p_holiday_date
                                      );

            FETCH csr_get_hours_worked
             INTO l_total_hours_worked;

            CLOSE csr_get_hours_worked;

            -- Get the earnings in the past two pay periods
            l_other_earnings :=
               get_other_earnings
                                (p_defined_balance_id      => l_defined_balance_id,
                                 p_assignment_id           => l_assignment_id,
                                 p_date_start              => l_orc_calc_start_date,
                                 p_date_end                => l_orc_calc_end_date
                                );
            l_pay_rate :=
               get_pay_rate (p_assignment_id       => l_assignment_id,
                             p_effective_date      => p_week_end_date
                            );
            -- Holiday Hours := avergage of the total hours worked in past two pay periods / 20 + other earnings /(pay rate * 20)
            l_holiday_hours :=
                 (NVL (l_stg_hrs, 0) + NVL (l_total_hours_worked, 0)
                 ) / 20
               +   (NVL (l_stg_earns, 0) + NVL (l_other_earnings, 0))
                 / (l_pay_rate * 20);

         IF (l_x_code_exists = 'N')
         THEN
            l_missed_sched := 'N';
         else
            l_missed_sched := 'Y';

         end if;


            insert_hol_stg (p_person_id             => tcs.person_id,
                            p_holiday_date          => p_holiday_date,
                            p_eligible_holiday      => 'Y',
                            p_missed_sched          => l_missed_sched,
                            p_averaging_period      => 28,
                            p_hours_worked          =>   (  NVL (l_total_hours_worked, 0)
                           + NVL (l_stg_hrs, 0)
                          ),
                            p_days_worked           =>   20,
                            p_average_hours         => ROUND (l_holiday_hours,
                                                              2
                                                             ),
                            p_hourly_rate           => l_pay_rate,
                            p_holiday_hours         => ROUND (l_holiday_hours,
                                                              2
                                                             )
                           );
            IF NVL (l_holiday_hours, 0) > 0
            THEN
               -- Create holiday time entry for the person
               create_holiday (p_assignment_id      => tcs.assignment_id,
                               p_hol_date           => p_holiday_date,
                               p_hours              => l_holiday_hours,
                               p_retcode            => p_retcode
                              );
            END IF;

      END LOOP;
   END calculate_on_holiday;

/*******************************************************************************
    Name         :   CALCULATE_QC_HOLIDAY
    Scope        :   LOCAL
    Descirption  :   This procedure is used to derive holiday hours for employees
                     in the given payroll and Quebec province

*******************************************************************************/
   PROCEDURE calculate_qc_holiday (
      p_payroll_id                   NUMBER,
      p_province                     VARCHAR2,
      p_week_end_date                DATE,
      p_holiday_date                 DATE,
      p_business_group_id            NUMBER,
      p_retcode             IN OUT   NUMBER
   )
   IS
      CURSOR csr_get_hours_worked (
         p_assignment_id   NUMBER,
         p_start_date      DATE,
         p_end_date        DATE,
         p_holiday_date    DATE
      )
      IS
         SELECT SUM (hsw.hours) total_hrs
           FROM hxt_det_hours_worked_f hsw
          WHERE hsw.assignment_id = p_assignment_id
            AND hsw.date_worked BETWEEN p_start_date AND p_end_date
            AND hsw.effective_end_date = hr_general.end_of_time
            AND hsw.element_type_id IN (
                   SELECT element_type_id
                     FROM pay_element_types_f petf
                    WHERE element_name IN ('REG', 'TRN', 'HOL', 'WH1')
                      AND petf.business_group_id = p_business_group_id
                      AND p_week_end_date BETWEEN petf.effective_start_date
                                              AND petf.effective_end_date);

      CURSOR csr_get_open_period
      IS
         SELECT week1_start_date
           FROM xxarg.xxarg_hr_otl_ctrl_tbl ctrl_tbl
          WHERE ctrl_tbl.payroll_id = p_payroll_id AND payroll_run = 'N';

      CURSOR csr_get_stg_hrs_worked (
         p_person_id    NUMBER,
         p_start_date   DATE,
         p_end_date     DATE
      )
      IS
         SELECT SUM (hours) stg_hours_worked
           FROM xxarg.xxarg_hr_wroc_hol_dtl_stg stg,
                per_all_people_f ppf,
                xxarg.xxarg_hr_tas_mapping_codes map_codes
          WHERE stg.national_identifier = ppf.national_identifier
            AND ppf.person_id = p_person_id
            AND p_end_date BETWEEN ppf.effective_start_date
                               AND ppf.effective_end_date
            AND stg.date_worked BETWEEN p_start_date AND p_end_date
            AND stg.record_type = 'T'
            AND stg.earning_code = map_codes.earning_code
            AND map_codes.system_source = 'CWS'
            AND map_codes.orc_earn_code1 IN ('REG', 'TRN');

      CURSOR csr_get_stg_earns (
         p_person_id    NUMBER,
         p_start_date   DATE,
         p_end_date     DATE
      )
      IS
         SELECT SUM (earnings) stg_earns
           FROM xxarg.xxarg_hr_wroc_hol_earn_stg stg, per_all_people_f ppf
          WHERE TRIM (stg.employee_number) = ppf.employee_number
            AND ppf.person_id = p_person_id
            AND p_end_date BETWEEN ppf.effective_start_date
                               AND ppf.effective_end_date
            AND stg.date_earned BETWEEN p_start_date AND p_end_date
            AND stg.earning_code IN ('BNR', 'RTR', 'VRC');

      l_x_code_exists         VARCHAR2 (10);
      l_assignment_id         NUMBER;
      l_total_hours_worked    NUMBER;
      l_days_worked           NUMBER;
      l_holiday_hours         NUMBER;
      l_period_start_date     DATE;
      l_defined_balance_id    NUMBER;
      l_pay_rate              NUMBER;
      l_other_earnings        NUMBER;
      l_calc_start_date       DATE;
      l_calc_end_date         DATE;
      l_orc_calc_start_date   DATE;
      l_orc_calc_end_date     DATE;
      l_stg_hrs               NUMBER;
      l_stg_earns             NUMBER;
      l_missed_sched          VARCHAR2(1);
      l_elig_hol              VARCHAR2(1);
   BEGIN
      -- Get the period start date corresponding to the week end date
      OPEN csr_get_open_period;

      FETCH csr_get_open_period
       INTO l_period_start_date;

      CLOSE csr_get_open_period;

      -- Get defined balance id corresponding to
      l_defined_balance_id :=
                      get_defined_bal_id ('WROC_QC_EARN_HOL', '_ASG_GRE_RUN');
      l_calc_start_date := l_period_start_date - 28;
      l_calc_end_date := l_period_start_date - 1;
      get_orc_calc_dates (p_payroll_id                  => p_payroll_id,
                          p_calculation_start_date      => l_calc_start_date,
                          p_calculation_end_date        => l_calc_end_date,
                          p_orc_calc_start_date         => l_orc_calc_start_date,
                          p_orc_calc_end_date           => l_orc_calc_end_date
                         );

      FOR tcs IN csr_get_hrly_emps (p_payroll_id, p_week_end_date, p_province, p_holiday_date)
      LOOP
         l_assignment_id := tcs.assignment_id;
         -- Check if there was an 'x' code in the cws file
         l_x_code_exists := chk_x_code (tcs.person_id, p_week_end_date);


            -- Get the total number of hours worked in the past two pay periods
            OPEN csr_get_hours_worked (l_assignment_id,
                                       l_orc_calc_start_date,
                                       l_orc_calc_end_date,
                                       p_holiday_date
                                      );

            FETCH csr_get_hours_worked
             INTO l_total_hours_worked;

            CLOSE csr_get_hours_worked;

            -- Get the earnings in the past two pay periods
            l_stg_hrs := 0;
            l_stg_earns := 0;

            IF (l_calc_start_date IS NOT NULL)
            THEN
               OPEN csr_get_stg_hrs_worked (tcs.person_id,
                                            l_calc_start_date,
                                            l_calc_end_date
                                           );

               FETCH csr_get_stg_hrs_worked
                INTO l_stg_hrs;

               CLOSE csr_get_stg_hrs_worked;

               OPEN csr_get_stg_earns (tcs.person_id,
                                       l_calc_start_date,
                                       l_calc_end_date
                                      );

               FETCH csr_get_stg_earns
                INTO l_stg_earns;

               CLOSE csr_get_stg_earns;
            END IF;

            l_other_earnings :=
               get_other_earnings
                                (p_defined_balance_id      => l_defined_balance_id,
                                 p_assignment_id           => l_assignment_id,
                                 p_date_start              => l_orc_calc_start_date,
                                 p_date_end                => l_orc_calc_end_date
                                );
            l_pay_rate :=
               get_pay_rate (p_assignment_id       => l_assignment_id,
                             p_effective_date      => p_week_end_date
                            );
            -- Holiday Hours := avergage of the total hours worked in past two pay periods / 20 + other earnings /(pay rate * 20)
            l_holiday_hours :=
                 (NVL (l_stg_hrs, 0) + NVL (l_total_hours_worked, 0)
                 ) / 20
               +   (NVL (l_stg_earns, 0) + NVL (l_other_earnings, 0))
                 / (l_pay_rate * 20);

         IF (l_x_code_exists = 'N')
         THEN
            l_missed_sched := 'N';
         else
            l_missed_sched := 'Y';
         end if;

         if (chk_emp_on_loa(tcs.assignment_id,p_holiday_date) = 'N') then
            l_elig_hol := 'Y';
         else
            l_elig_hol := 'N';
            l_holiday_hours := 0;
         END IF;

            insert_hol_stg (p_person_id             => tcs.person_id,
                            p_holiday_date          => p_holiday_date,
                            p_eligible_holiday      => l_elig_hol,
                            p_missed_sched          => l_missed_sched,
                            p_averaging_period      => 28,
                            p_hours_worked          =>   (  NVL (l_total_hours_worked, 0)
                           + NVL (l_stg_hrs, 0)
                          ),
                            p_days_worked           =>   20,
                            p_average_hours         => ROUND (l_holiday_hours,
                                                              2
                                                             ),
                            p_hourly_rate           => l_pay_rate,
                            p_holiday_hours         => ROUND (l_holiday_hours,
                                                              2
                                                             )
                           );

            IF NVL (l_holiday_hours, 0) > 0
            THEN
               -- Create holiday time entry for the person
               create_holiday (p_assignment_id      => tcs.assignment_id,
                               p_hol_date           => p_holiday_date,
                               p_hours              => l_holiday_hours,
                               p_retcode            => p_retcode
                              );

            END IF;
      END LOOP;
   END calculate_qc_holiday;

/*******************************************************************************
    Name         :   CALCULATE_BC_HOLIDAY
    Scope        :   LOCAL
    Descirption  :   This procedure is used to derive holiday hours for employees
                     in the given payroll and British Columbia province

*******************************************************************************/

   PROCEDURE calculate_bc_holiday (
      p_payroll_id                   NUMBER,
      p_province                     VARCHAR2,
      p_week_end_date                DATE,
      p_holiday_date                 DATE,
      p_business_group_id            NUMBER,
      p_retcode             IN OUT   NUMBER
   )
   IS
      CURSOR csr_get_hours_worked (
         p_assignment_id   NUMBER,
         p_start_date      DATE,
         p_end_date        DATE,
         p_holiday_date    DATE
      )
      IS
         SELECT SUM (hsw.hours) total_hrs
           FROM hxt_sum_hours_worked_f hsw
          WHERE hsw.assignment_id = p_assignment_id
            AND hsw.date_worked BETWEEN p_start_date AND p_end_date
            AND hsw.effective_end_date = hr_general.end_of_time
            AND (   hsw.element_type_id IS NULL
                 OR hsw.element_type_id IN (
                       SELECT element_type_id
                         FROM pay_element_types_f petf
                        WHERE element_name IN
                                   ('REG', 'TRN', 'HOL', 'WH1', 'WHH', 'WHL')
                          AND petf.business_group_id = p_business_group_id
                          AND p_week_end_date BETWEEN petf.effective_start_date
                                                  AND petf.effective_end_date)
                );

      CURSOR csr_get_open_period
      IS
         SELECT week1_start_date
           FROM xxarg.xxarg_hr_otl_ctrl_tbl ctrl_tbl
          WHERE ctrl_tbl.payroll_id = p_payroll_id AND payroll_run = 'N';

      CURSOR csr_get_days_worked (
         p_assignment_id   NUMBER,
         p_start_date      DATE,
         p_end_date        DATE
      )
      IS
         SELECT COUNT (DISTINCT hsw.date_worked) days_worked
           FROM hxt_sum_hours_worked_f hsw
          WHERE hsw.assignment_id = p_assignment_id
            AND hsw.date_worked BETWEEN p_start_date AND p_end_date
            AND hsw.effective_end_date = hr_general.end_of_time
            AND (   hsw.element_type_id IS NULL
                 OR hsw.element_type_id IN (
                       SELECT heg.element_type_id
                         FROM hxt_earn_groups heg,
                              hxt_earning_policies hep,
                              hxt_add_assign_info_f haai
                        WHERE haai.assignment_id = p_assignment_id
                          AND haai.earning_policy = hep.ID
                          AND hep.egt_id = heg.egt_id
                          AND hsw.date_worked BETWEEN haai.effective_start_date
                                                  AND haai.effective_end_date)
                );

      CURSOR csr_get_stg_hrs_worked (
         p_person_id    NUMBER,
         p_start_date   DATE,
         p_end_date     DATE
      )
      IS
         SELECT SUM (hours) stg_hours_worked
           FROM xxarg.xxarg_hr_wroc_hol_dtl_stg stg,
                per_all_people_f ppf,
                xxarg.xxarg_hr_tas_mapping_codes map_codes
          WHERE stg.national_identifier = ppf.national_identifier
            AND ppf.person_id = p_person_id
            AND p_end_date BETWEEN ppf.effective_start_date
                               AND ppf.effective_end_date
            AND stg.date_worked BETWEEN p_start_date AND p_end_date
            AND stg.record_type = 'T'
            AND stg.earning_code = map_codes.earning_code
            AND map_codes.system_source = 'CWS'
            AND map_codes.orc_earn_code1 IN ('REG', 'TRN');

      CURSOR csr_get_stg_days_worked (
         p_person_id    NUMBER,
         p_start_date   DATE,
         p_end_date     DATE
      )
      IS
         SELECT COUNT (DISTINCT date_worked) stg_days_worked
           FROM xxarg.xxarg_hr_wroc_hol_dtl_stg stg,
                per_all_people_f ppf,
                xxarg.xxarg_hr_tas_mapping_codes map_codes
          WHERE stg.national_identifier = ppf.national_identifier
            AND ppf.person_id = p_person_id
            AND p_end_date BETWEEN ppf.effective_start_date
                               AND ppf.effective_end_date
            AND stg.date_worked BETWEEN p_start_date AND p_end_date
            AND stg.record_type = 'T'
            AND stg.earning_code = map_codes.earning_code
            AND map_codes.system_source = 'CWS'
            AND map_codes.orc_earn_code1 IN ('REG', 'TRN', 'HOL');

      CURSOR csr_get_stg_earns (
         p_person_id    NUMBER,
         p_start_date   DATE,
         p_end_date     DATE
      )
      IS
         SELECT SUM (earnings) stg_earns
           FROM xxarg.xxarg_hr_wroc_hol_earn_stg stg, per_all_people_f ppf
          WHERE TRIM (stg.employee_number) = ppf.employee_number
            AND ppf.person_id = p_person_id
            AND p_end_date BETWEEN ppf.effective_start_date
                               AND ppf.effective_end_date
            AND stg.date_earned BETWEEN p_start_date AND p_end_date
            AND stg.earning_code IN ('LAN', 'VRC', 'RTR');

      l_x_code_exists              VARCHAR2 (10);
      l_assignment_id              NUMBER;
      l_total_hours_worked         NUMBER;
      l_days_worked                NUMBER;
      l_holiday_hours              NUMBER;
      l_period_start_date          DATE;
      l_defined_balance_id         NUMBER;
      l_pay_rate                   NUMBER;
      l_other_earnings             NUMBER;
      l_hrs_calc_start_date        DATE;
      l_hrs_calc_end_date          DATE;
      l_orc_hrs_calc_start_date    DATE;
      l_orc_hrs_calc_end_date      DATE;
      l_earn_calc_start_date       DATE;
      l_earn_calc_end_date         DATE;
      l_orc_earn_calc_start_date   DATE;
      l_orc_earn_calc_end_date     DATE;
      l_stg_hours                  NUMBER;
      l_stg_days_worked            NUMBER;
      l_stg_earn                   NUMBER;
      l_elig_hol                   VARCHAR2 (1);
   BEGIN
      -- Get the period start date corresponding to the week end date
      OPEN csr_get_open_period;

      FETCH csr_get_open_period
       INTO l_period_start_date;

      CLOSE csr_get_open_period;

      l_hrs_calc_start_date := l_period_start_date - (30);
      l_hrs_calc_end_date := l_period_start_date - 1;
      get_orc_calc_dates (p_payroll_id                  => p_payroll_id,
                          p_calculation_start_date      => l_hrs_calc_start_date,
                          p_calculation_end_date        => l_hrs_calc_end_date,
                          p_orc_calc_start_date         => l_orc_hrs_calc_start_date,
                          p_orc_calc_end_date           => l_orc_hrs_calc_end_date
                         );
      l_earn_calc_start_date := l_period_start_date - (28);
      l_earn_calc_end_date := l_period_start_date - 1;
      get_orc_calc_dates (p_payroll_id                  => p_payroll_id,
                          p_calculation_start_date      => l_earn_calc_start_date,
                          p_calculation_end_date        => l_earn_calc_end_date,
                          p_orc_calc_start_date         => l_orc_earn_calc_start_date,
                          p_orc_calc_end_date           => l_orc_earn_calc_end_date
                         );
      -- Get defined balance id corresponding to
      l_defined_balance_id :=
                       get_defined_bal_id ('WROC_BC_EARN_HOL', '_ASG_GRE_RUN');

      FOR tcs IN csr_get_hrly_emps (p_payroll_id, p_week_end_date, p_province,p_holiday_date)
      LOOP
         l_assignment_id := tcs.assignment_id;
         l_stg_hours := 0;
         l_stg_days_worked := 0;
         l_stg_earn := 0;

         IF (l_hrs_calc_start_date IS NOT NULL)
         THEN
            -- Get the total number of staging hours
            OPEN csr_get_stg_hrs_worked (tcs.person_id,
                                         l_hrs_calc_start_date,
                                         l_hrs_calc_end_date
                                        );

            FETCH csr_get_stg_hrs_worked
             INTO l_stg_hours;

            CLOSE csr_get_stg_hrs_worked;

            OPEN csr_get_stg_days_worked (tcs.person_id,
                                          l_hrs_calc_start_date,
                                          l_hrs_calc_end_date
                                         );

            FETCH csr_get_stg_days_worked
             INTO l_stg_days_worked;

            CLOSE csr_get_stg_days_worked;
         END IF;

         IF (l_earn_calc_start_date IS NOT NULL)
         THEN
            OPEN csr_get_stg_earns (tcs.person_id,
                                    l_earn_calc_start_date,
                                    l_earn_calc_end_date
                                   );

            FETCH csr_get_stg_earns
             INTO l_stg_earn;

            CLOSE csr_get_stg_earns;
         END IF;

         -- Get the total number of hours worked in the past 30 days
         OPEN csr_get_hours_worked (l_assignment_id,
                                    l_orc_hrs_calc_start_date,
                                    l_orc_hrs_calc_end_date,
                                    p_holiday_date
                                   );

         FETCH csr_get_hours_worked
          INTO l_total_hours_worked;

         CLOSE csr_get_hours_worked;

         -- Get the earnings in the past two pay periods
         l_other_earnings :=
            get_other_earnings (p_defined_balance_id      => l_defined_balance_id,
                                p_assignment_id           => l_assignment_id,
                                p_date_start              => l_orc_earn_calc_start_date,
                                p_date_end                => l_orc_earn_calc_end_date
                               );
         l_pay_rate :=
            get_pay_rate (p_assignment_id       => l_assignment_id,
                          p_effective_date      => p_week_end_date
                         );

         OPEN csr_get_days_worked (l_assignment_id,
                                   l_orc_hrs_calc_start_date,
                                   l_orc_hrs_calc_end_date
                                  );

         FETCH csr_get_days_worked
          INTO l_days_worked;

         CLOSE csr_get_days_worked;

         IF (NVL (l_stg_days_worked, 0) + NVL (l_days_worked, 0) >= 1)
         THEN
            -- Holiday Hours := avergage of the total hours worked in past two pay periods / 20 + other earnings /(pay rate * 20)
            l_holiday_hours :=
                   (NVL (l_stg_hours, 0) + NVL (l_total_hours_worked, 0)
                   )
                 / (NVL (l_stg_days_worked, 0) + NVL (l_days_worked, 0))
               +   (NVL (l_stg_earn, 0) + NVL (l_other_earnings, 0))
                 / (  l_pay_rate
                    * (NVL (l_stg_days_worked, 0) + NVL (l_days_worked, 0))
                   );

            -- Check if the person is employed for atleast 30 days
            -- the employee should have worked atleast 15 days of the 30 days preceding the holiday
            IF ((p_holiday_date - tcs.hire_date) >= 30 AND l_days_worked >= 15)
            THEN
               l_elig_hol := 'Y';
            ELSE
               l_holiday_hours := 0;
               l_elig_hol := 'N';
            END IF;

            insert_hol_stg (p_person_id             => tcs.person_id,
                            p_holiday_date          => p_holiday_date,
                            p_eligible_holiday      => l_elig_hol,
                            p_missed_sched          => NULL,
                            p_averaging_period      => 20,
                            p_hours_worked          =>   NVL (l_stg_hours, 0)
                                                       + NVL
                                                            (l_total_hours_worked,
                                                             0
                                                            ),
                            p_days_worked           =>   NVL
                                                            (l_stg_days_worked,
                                                             0
                                                            )
                                                       + NVL (l_days_worked,
                                                              0),
                            p_average_hours         => ROUND (l_holiday_hours,
                                                              2
                                                             ),
                            p_hourly_rate           => l_pay_rate,
                            p_holiday_hours         => ROUND (l_holiday_hours,
                                                              2
                                                             )
                           );

            IF (NVL (l_holiday_hours, 0) > 0 AND l_elig_hol = 'Y')
            THEN

            -- Create holiday time entry for the person
               create_holiday (p_assignment_id      => tcs.assignment_id,
                               p_hol_date           => p_holiday_date,
                               p_hours              => l_holiday_hours,
                               p_retcode            => p_retcode
                              );
               NULL;
            END IF;
         END IF;
      END LOOP;
   END calculate_bc_holiday;

/*******************************************************************************
    Name         :   CALCULATE_HOLIDAY
    Scope        :   PUBLIC
    Descirption  :   This is the main procedure that will be called from
                     the concurrent program

*******************************************************************************/

   PROCEDURE calculate_holiday (
      p_errbuff         OUT   VARCHAR2,
      p_retcode         OUT   NUMBER,
      p_payroll_id            NUMBER,
      p_week_end_date         VARCHAR2
   )
   IS
      CURSOR csr_get_bg_id
      IS
         SELECT pbg.business_group_id
           FROM per_business_groups pbg, pay_payrolls_f ppf
          WHERE ppf.payroll_id = p_payroll_id
            AND ppf.business_group_id = pbg.business_group_id;

      CURSOR csr_chk_holiday (
         p_holiday_calendar    VARCHAR2,
         p_week_end_date       DATE,
         p_business_group_id   NUMBER
      )
      IS
         SELECT hhd.holiday_date
           FROM hxt_holiday_calendars hhc,
                pay_element_types_f petf,
                hxt_holiday_days hhd
          WHERE hhc.element_type_id = petf.element_type_id
            AND petf.business_group_id = p_business_group_id
            AND hhc.ID = hhd.hcl_id
            AND hhd.holiday_date BETWEEN (p_week_end_date - 6)
                                     AND p_week_end_date
            AND hhc.NAME = p_holiday_calendar;

      l_week_end_date       DATE
                               := fnd_date.canonical_to_date (p_week_end_date);
      l_business_group_id   NUMBER;
      l_hol_exists          NUMBER;
   BEGIN
      INSERT INTO fnd_sessions
                  (session_id, effective_date
                  )
           VALUES (USERENV ('sessionid'), SYSDATE
                  );

      OPEN csr_get_bg_id;

      FETCH csr_get_bg_id
       INTO l_business_group_id;

      CLOSE csr_get_bg_id;

      -- Check if there a holiday in the week for Alberta province
      FOR hol IN csr_chk_holiday ('WROC AB Holiday Calendar',
                                  l_week_end_date,
                                  l_business_group_id
                                 )
      LOOP
         -- If there was an holiday in the week, call the procedure to
         -- calculate holiday hours for all the timecards in AB province
         calculate_ab_holiday (p_payroll_id             => p_payroll_id,
                               p_province               => 'AB',
                               p_week_end_date          => l_week_end_date,
                               p_holiday_date           => hol.holiday_date,
                               p_business_group_id      => l_business_group_id,
                               p_retcode                => p_retcode
                              );
      END LOOP;

      -- Check if there is a holiday in the week for British Columbia
      FOR hol IN csr_chk_holiday ('WROC BC Holiday Calendar',
                                  l_week_end_date,
                                  l_business_group_id
                                 )
      LOOP
         -- If there was an holiday in the week, call the procedure to
         -- calculate holiday hours for all the timecards in BC province
         calculate_bc_holiday (p_payroll_id             => p_payroll_id,
                               p_province               => 'BC',
                               p_week_end_date          => l_week_end_date,
                               p_holiday_date           => hol.holiday_date,
                               p_business_group_id      => l_business_group_id,
                               p_retcode                => p_retcode
                              );
      END LOOP;

      -- Check if there is a holiday in the week for Ontario
      FOR hol IN csr_chk_holiday ('WROC ON Hourly Holiday Calendar',
                                  l_week_end_date,
                                  l_business_group_id
                                 )
      LOOP
         -- If there was an holiday in the week, call the procedure to
         -- calculate holiday hours for all the timecards in ON province
         calculate_on_holiday (p_payroll_id             => p_payroll_id,
                               p_province               => 'ON',
                               p_week_end_date          => l_week_end_date,
                               p_holiday_date           => hol.holiday_date,
                               p_business_group_id      => l_business_group_id,
                               p_retcode                => p_retcode
                              );
      END LOOP;

      -- Check if there is a holiday in the week for Quebec
      FOR hol IN csr_chk_holiday ('WROC QC Hourly Holiday Calendar',
                                  l_week_end_date,
                                  l_business_group_id
                                 )
      LOOP
         -- If there was an holiday in the week, call the procedure to
         -- calculate holiday hours for all the timecards in QC province
         calculate_qc_holiday (p_payroll_id             => p_payroll_id,
                               p_province               => 'QC',
                               p_week_end_date          => l_week_end_date,
                               p_holiday_date           => hol.holiday_date,
                               p_business_group_id      => l_business_group_id,
                               p_retcode                => p_retcode
                              );
      END LOOP;
   END calculate_holiday;
END xxarg_hr_wroc_hol_calc;
