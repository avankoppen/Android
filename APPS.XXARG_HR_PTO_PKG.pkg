CREATE OR REPLACE PACKAGE XXARG_HR_PTO_PKG as

/*******************************************************************************
*         $Header: XXARG_HR_PTO_PKG.pkh 115.0 23-JUN-2009 kvsankar S           *
*             Copyright (c) 2009, by Wendy's Arby's Group                      *
*                                                                              *
*   Package Name     :  XXARG_HR_PTO_PKG                                       *
*   Author           :  Kumaresan Sankaranaraayana, Indecon                    *
*   Description      :  This package provides all the procedures used by PTO   *
*                                                                              *
* HISTORY                                                                      *
* Changed BY     Change Date   Version  Comments                               *
* -------------  ------------  -------  ---------------------------------------*
*  Kumaresan      23-JUN-2009    115.0  Initial Version                        *
*                                                                              *
*******************************************************************************/


/*******************************************************************************
    Name         :   GET_ANNUAL_RATE
    Scope        :   GLOBAL
    Description  :   This function is used to retrieve Annual rate from the
                     Accrual Plan table passed
*******************************************************************************/
FUNCTION GET_ANNUAL_RATE(p_accr_plan_table in varchar2
                        ,p_column_name     in varchar2
                        ,p_years_of_svc    in number
                        ,p_eff_date        in date) RETURN NUMBER;


/*******************************************************************************
    Name         :   GET_PRORATED_DAYS
    Scope        :   GLOBAL
    Description  :   This function is used to retrieve Prorated Days based on
                     the passed in Date
*******************************************************************************/
FUNCTION GET_PRORATED_DAYS(p_accr_plan_table in varchar2
                          ,p_column_name     in varchar2
                          ,p_proration_date  in date
                          ,p_eff_date        in date) RETURN NUMBER;


/*******************************************************************************
    Name         :   GET_PTO_ADJUSTED_DATE
    Scope        :   GLOBAL
    Description  :   This function is used to retrieve the PTO Adjusted Date
                     from the Person DFF
*******************************************************************************/
FUNCTION GET_PTO_ADJUSTED_DATE(p_assignment_id   in number
                              ,p_eff_date        in date) RETURN DATE;


/*******************************************************************************
    Name         :   GET_PREM_ELIG
    Scope        :   GLOBAL
    Description  :   This function is used to retrieve the PTO Premium
                     Elgibility from the Person DFF
*******************************************************************************/
FUNCTION GET_PREM_ELIG(p_assignment_id   in number
                      ,p_eff_date        in date) RETURN VARCHAR2;

/*******************************************************************************
    Name         :   IS_VAC_PAYOUT_ALL
    Scope        :   GLOBAL
    Description  :   This function checks whether the Vacation Payout is
                     allowed for the employee
*******************************************************************************/
FUNCTION IS_VAC_PAYOUT_ALL(p_assignment_id    in number
                          ,p_termination_date in date) RETURN VARCHAR2;

/*******************************************************************************
    Name         :   CHK_IF_EMP_REH_IN_6_MONTH
    Scope        :   GLOBAL
    Description  :   This function checks whether the employee is rehired in
                     6 months
*******************************************************************************/
FUNCTION CHK_IF_EMP_REH_IN_6_MONTH(p_assignment_id    in number
                                  ,p_svc_start_date   in date) RETURN VARCHAR2;

/*******************************************************************************
    Name         :   GET_STORE_VAC_HOURS
    Scope        :   GLOBAL
    Description  :   This function get the accrued hours for employees on
                     Hourly vacation plan
*******************************************************************************/
FUNCTION GET_STORE_VAC_HOURS(p_assignment_id    in number
                            ,p_calc_end_date    in date
                            ,p_enrollment_date  in date) RETURN NUMBER;

/*******************************************************************************
    Name         :   CREATE_US_VAC_PAYOUT
    Scope        :   GLOBAL
    Description  :   This procedure will be used to create the Vacation payout
                     absence entry at the time of termination for US employees
*******************************************************************************/
PROCEDURE CREATE_US_VAC_PAYOUT(p_person_id_o               in number
                              ,p_actual_termination_date_o in date
                              ,p_actual_termination_date   in date);

/*******************************************************************************
    Name         :   CREATE_CA_VAC_PAYOUT
    Scope        :   GLOBAL
    Description  :   This procedure will be used to create the Vacation payout
                     element entry at the time of termination for CA employees
*******************************************************************************/
PROCEDURE CREATE_CA_VAC_PAYOUT(p_person_id_o               in number
                              ,p_actual_termination_date_o in date
                              ,p_actual_termination_date   in date);

/*******************************************************************************
    Name         :   GET_WEEK_END_DATE
    Scope        :   GLOBAL
    Description  :   This procedure will be used to get the week end date
                     for the week.
*******************************************************************************/
FUNCTION GET_WEEK_END_DATE(p_payroll_id in number
                          ,p_eff_date   in date) return date;

/*******************************************************************************
    Name         :   PROCESS_YEAR_END_CARRYOVER_ADJ
    Scope        :   GLOBAL
    Description  :   This procedure will create the year end caryover adjustment
                     that will make sure that any holidays taken during the
                     cross over period are taken from the right bucket
*******************************************************************************/
PROCEDURE PROCESS_YEAR_END_CARRYOVER_ADJ(errbuf        OUT VARCHAR2
                                        ,retcode       OUT VARCHAR2
                                        ,pi_bus_grp_id in  number
                                        ,p_plan_id     in  number
                                        ,p_eff_date    in  varchar2);

/*******************************************************************************
    Name         :   GET_HIRE_DATE
    Scope        :   GLOBAL
    Description  :   This procedure will be get the hire date that needs to be
                     used for length of service calculation.
*******************************************************************************/
FUNCTION GET_HIRE_DATE(p_assignment_id in number
                      ,p_eff_date      in date
                      ,p_bk_in_svc     in number) return date;


/*******************************************************************************
    Name         :   GET_TRUE_UP_AMT
    Scope        :   GLOBAL
    Description  :   This procedure will be get the true up amount that needs to
                     be paid
*******************************************************************************/
FUNCTION GET_TRUE_UP_AMT(pi_bus_grp_id   in number
                        ,pi_asg_id       in number
                        ,pi_pay_id       in number
                        ,pi_jur_code     in varchar2
                        ,pi_pd_str_date  in date
                        ,pi_pd_end_date  in date
                        ,pi_rate         in number
                        ,po_ytd_earn    out number
                        ,po_ytd_vac     out number
                        ,po_co          out number) return number;


/*******************************************************************************
    Name         :   GET_LOA_STATUS_IN_YEAR
    Scope        :   GLOBAL
    Description  :   This procedure will be get the true up amount that needs to
                     be paid
*******************************************************************************/
FUNCTION GET_LOA_STATUS_IN_YEAR(pi_asg_id   in number
                               ,pi_eff_date in date) return varchar2;


   gc_package_name CONSTANT VARCHAR2(30) := 'XXARG_HR_PTO_PKG';
   gv_debug        VARCHAR2(1) := 'N';

END XXARG_HR_PTO_PKG; 

/
CREATE OR REPLACE PACKAGE BODY XXARG_HR_PTO_PKG as

/*******************************************************************************
*         $Header: XXARG_HR_PTO_PKG.pkb 115.0 23-JUN-2009 kvsankar S           *
*             Copyright (c) 2009, by Wendy's Arby's Group                      *
*                                                                              *
*   Package Name     :  XXARG_HR_PTO_PKG                                       *
*   Author           :  Kumaresan Sankaranaraayana, Indecon                    *
*   Description      :  This package provides all the procedures used by PTO   *
*                                                                              *
* HISTORY                                                                      *
* Changed BY     Change Date   Version  Comments                               *
* -------------  ------------  -------  ---------------------------------------*
*  Kumaresan      23-JUN-2009    115.0  Initial Version                        *
*                                                                              *
*******************************************************************************/

/*******************************************************************************
    Name         :   GET_ANNUAL_RATE
    Scope        :   GLOBAL
*******************************************************************************/
FUNCTION GET_ANNUAL_RATE(p_accr_plan_table in varchar2
                        ,p_column_name     in varchar2
                        ,p_years_of_svc    in number
                        ,p_eff_date        in date) RETURN NUMBER
IS

-- Cursor to get the value from the range where the passed in Years of Service
-- falls
cursor c_get_value_for_range is
select puci.value
  from pay_user_tables put
      ,pay_user_columns puc
      ,pay_user_column_instances_f puci
      ,pay_user_rows_f pur
 where put.user_table_name = p_accr_plan_table
   and put.user_table_id = puc.user_table_id
   and puc.user_column_name = p_column_name
   and puci.user_column_id = puc.user_column_id
   and pur.user_table_id = put.user_table_id
   and puci.user_row_id = pur.user_row_id
   and to_number(p_years_of_svc) >= row_low_range_or_name
   and to_number(p_years_of_svc) < row_high_range
   and p_eff_date between pur.effective_start_date
                      and pur.effective_end_date
   and p_eff_date between puci.effective_start_date
                      and puci.effective_end_date;

   ln_ann_rate number;
BEGIN
   ln_ann_rate := 0;

   -- Get the value from the User Table
   open c_get_value_for_range;
   fetch c_get_value_for_range into ln_ann_rate;
   close c_get_value_for_range;

   return ln_ann_rate;
END GET_ANNUAL_RATE;

/*******************************************************************************
    Name         :   GET_PRORATED_DAYS
    Scope        :   GLOBAL
*******************************************************************************/
FUNCTION GET_PRORATED_DAYS(p_accr_plan_table in varchar2
                          ,p_column_name     in varchar2
                          ,p_proration_date  in date
                          ,p_eff_date        in date) RETURN NUMBER
IS

-- Cursor to get the value for Prorated days
cursor c_get_value_for_match(cp_month varchar2) is
select puci.value
  from pay_user_tables put
      ,pay_user_columns puc
      ,pay_user_column_instances_f puci
      ,pay_user_rows_f pur
 where put.user_table_name = p_accr_plan_table
   and put.user_table_id = puc.user_table_id
   and puc.user_column_name = p_column_name
   and puci.user_column_id = puc.user_column_id
   and pur.user_table_id = put.user_table_id
   and puci.user_row_id = pur.user_row_id
   and pur.row_low_range_or_name = cp_month
   and p_eff_date between pur.effective_start_date
                      and pur.effective_end_date
   and p_eff_date between puci.effective_start_date
                      and puci.effective_end_date;

   lv_month varchar2(30);

   ln_days  number;

BEGIN
   lv_month := trim(upper(to_char(p_proration_date,'MONTH')));

   -- Get the value from the User Table
   open c_get_value_for_match(lv_month);
   fetch c_get_value_for_match into ln_days;
   close c_get_value_for_match;

   return ln_days;

END GET_PRORATED_DAYS;

/*******************************************************************************
    Name         :   GET_PTO_ADJUSTED_DATE
    Scope        :   GLOBAL
*******************************************************************************/
FUNCTION GET_PTO_ADJUSTED_DATE(p_assignment_id   in number
                              ,p_eff_date        in date) RETURN DATE
IS

-- Cursor to retrieve PTO Adjusted Date
cursor c_get_pto_adj_date is
select fnd_date.canonical_to_date(ppf.attribute12)
  from per_all_people_f ppf
      ,per_all_assignments_f paf
 where paf.assignment_id = p_assignment_id
   and paf.person_id = ppf.person_id
   and p_eff_date between ppf.effective_start_date
                      and ppf.effective_end_date
   and p_eff_date between paf.effective_start_date
                      and paf.effective_end_date;

   ld_pto_adj_date date;
BEGIN
   ld_pto_adj_date := null;

   -- Get PTO Adjusted Date
   open c_get_pto_adj_date;
   fetch c_get_pto_adj_date into ld_pto_adj_date;
   close c_get_pto_adj_date;

   return ld_pto_adj_date;

END GET_PTO_ADJUSTED_DATE;

/*******************************************************************************
    Name         :   GET_PREM_ELIG
    Scope        :   GLOBAL
*******************************************************************************/
FUNCTION GET_PREM_ELIG(p_assignment_id   in number
                      ,p_eff_date        in date) RETURN VARCHAR2
IS

-- Cursor to retrieve PTO Adjusted Date
cursor c_get_pto_adj_date is
select decode(ppf.attribute13
             ,'Yes','Y'
             ,'N')
  from per_all_people_f ppf
      ,per_all_assignments_f paf
 where paf.assignment_id = p_assignment_id
   and paf.person_id = ppf.person_id
   and p_eff_date between ppf.effective_start_date
                      and ppf.effective_end_date
   and p_eff_date between paf.effective_start_date
                      and paf.effective_end_date;

   lv_prem_elig varchar2(10);
BEGIN
   lv_prem_elig := 'N';

   -- Get PTO Adjusted Date
   open c_get_pto_adj_date;
   fetch c_get_pto_adj_date into lv_prem_elig;
   close c_get_pto_adj_date;

   return nvl(lv_prem_elig,'N');

END GET_PREM_ELIG;

/*******************************************************************************
    Name         :   IS_VAC_PAYOUT_ALL
    Scope        :   GLOBAL
*******************************************************************************/
FUNCTION IS_VAC_PAYOUT_ALL(p_assignment_id    in number
                          ,p_termination_date in date) RETURN VARCHAR2
IS

-- Cursor to get Work State
cursor c_get_work_state is
 select hl.region_2
       ,ppos.leaving_reason
   from per_all_assignments_f paf
       ,hr_locations_all hl
       ,per_periods_of_service ppos
  where paf.assignment_id = p_assignment_id
    and hl.location_id = paf.location_id
    and ppos.period_of_service_id = paf.period_of_service_id
    and p_termination_date between paf.effective_start_date
                               and paf.effective_end_date;


-- Cursor to check for Leaving Reason
cursor c_chk_leav_reas(cp_state       varchar2
                      ,cp_term_reason varchar2) is
select 'Exists'
  from fnd_lookup_values
 where lookup_type = 'LEAV_REAS'
   and lookup_code = cp_term_reason
   and attribute1 like '%' || cp_state || '%';

   lv_state     varchar2(10);
   lv_leav_reas varchar2(30);
   lv_exists    varchar2(30);
   lv_payout    varchar2(1);

BEGIN
   lv_payout := 'Y';

   -- Get Work Location state
   open c_get_work_state;
   fetch c_get_work_state into lv_state
                              ,lv_leav_reas;
   close c_get_work_state ;

   -- Check whether the State is in the exception list for the given termination
   -- reason
   open c_chk_leav_reas(lv_state
                       ,lv_leav_reas);
   fetch c_chk_leav_reas into lv_exists;
   if c_chk_leav_reas%FOUND then
      lv_payout := 'N';
   end if;
   close c_chk_leav_reas;

   return lv_payout;
END IS_VAC_PAYOUT_ALL;

/*******************************************************************************
    Name         :   CHK_IF_EMP_REH_IN_6_MONTH
    Scope        :   GLOBAL
*******************************************************************************/
FUNCTION CHK_IF_EMP_REH_IN_6_MONTH(p_assignment_id    in number
                                  ,p_svc_start_date   in date) RETURN VARCHAR2
IS

-- Cursot to get the Maximum termination date for a rehire
cursor c_get_max_term_date is
select max(actual_termination_date)
  from per_periods_of_service ppos
      ,per_all_assignments_f paf
 where paf.assignment_id = p_assignment_id
   and paf.person_id = ppos.person_id
   and ppos.actual_termination_date < = p_svc_start_date;

   ld_last_term_date date;

   lv_emp_reh        varchar2(1);
BEGIN
   lv_emp_reh := 'N';

   -- Fetch maximum termination date
   open c_get_max_term_date;
   fetch c_get_max_term_date into ld_last_term_date;
   close c_get_max_term_date;

   -- Check if employee was re-hired within six months of last termination
   if p_svc_start_date <= add_months(ld_last_term_date,6) then
      lv_emp_reh := 'Y';
   end if;

   return lv_emp_reh;
END;

/*******************************************************************************
    Name         :   GET_STORE_VAC_HOURS
    Scope        :   GLOBAL
*******************************************************************************/
FUNCTION GET_STORE_VAC_HOURS(p_assignment_id    in number
                            ,p_calc_end_date    in date
                            ,p_enrollment_date  in date) RETURN NUMBER
IS

cursor c_get_te_def_bal is
select creator_id
  from ff_user_entities
 where user_entity_name = 'WAG_STORE_WORKED_HOURS_ASG_GRE_RUN'
   and business_group_id = 0;

cursor c_get_max_asg_act_id(cp_start_date date
                           ,cp_end_date   date) is
select assignment_action_id
  from pay_assignment_actions paa
      ,pay_payroll_actions ppa
where paa.assignment_id = p_assignment_id
  and paa.payroll_action_id = ppa.payroll_action_id
  and ppa.action_type in ('R','Q','B','I','V')
  and ppa.effective_date between cp_start_date
                             and cp_end_date
 order by paa.action_sequence desc;

cursor c_get_tot_hours(cp_def_bal_id number
                      ,cp_start_date date
                      ,cp_end_date   date) is
select sum(prb.balance_value)
  from pay_run_balances prb
 where assignment_id = p_assignment_id
   and defined_balance_id = cp_def_bal_id
   and prb.effective_date between cp_start_date
                              and cp_end_date;

   ln_def_bal_id number;
   ln_te_hours   number;
   ln_asg_act_id number;
   ln_no_of_wks  number;
   ln_vac_hours  number;
   ln_perc       number;

   ld_start_date date;
   ld_end_date   date;

   lb_calc_vac   boolean;

BEGIN
   ln_te_hours := 0;
   lb_calc_vac := TRUE;
   -- Get Time Entry Hours Defined Balance ID
   open c_get_te_def_bal;
   fetch c_get_te_def_bal into ln_def_bal_id;
   close c_get_te_def_bal;

   ld_start_date := trunc(add_months(p_calc_end_date, -12),'Y');
   ld_end_date   := add_months(ld_start_date, 12) - 1;

   -- If plan/employee started after start of year then change
   if ld_start_date <= p_enrollment_date then
      ld_start_date := p_enrollment_date;
   end if;

   if trunc(p_enrollment_date,'Y') = trunc(ld_end_date,'Y') then
      if (trim(to_char(ld_start_date, 'MONTH'))
             in ('OCTOBER','NOVEMBER','DECEMBER')) then
         lb_calc_vac := FALSE;
      end if;
   end if;

   if lb_calc_vac then
      -- Get Total Hours
      open c_get_tot_hours(ln_def_bal_id
                          ,ld_start_date
                          ,ld_end_date);
      fetch c_get_tot_hours into ln_te_hours;
      close c_get_tot_hours;

      -- Get number of weeks
      if ld_start_date = trunc(ld_end_date,'Y') then
         ln_no_of_wks := 52;
      else
         ln_no_of_wks := (ld_end_date - ld_start_date)/7;
      end if;

      -- Calculate Vacation Hours
      ln_vac_hours := ln_te_hours/ln_no_of_wks;

      if ln_vac_hours > 40 then
         ln_vac_hours := 40;
      elsif ln_vac_hours < 30 then
         ln_vac_hours := 0;
      end if;

      -- Prorate Calculated hours based on enrollment date if required
      if trunc(p_enrollment_date,'Y') = trunc(ld_end_date,'Y') then
         ln_perc := XXARG_HR_PTO_PKG.GET_PRORATED_DAYS(
                                            'WAG Stores Vacation Proration'
                                           ,'Percentage'
                                           ,p_enrollment_date
                                           ,p_calc_end_date);
         ln_vac_hours := round((ln_perc/100) * ln_vac_hours);
      end if;
   else
      ln_vac_hours := 0;
   end if;

   if ln_vac_hours is null then
      ln_vac_hours := 0;
   end if;

   ln_vac_hours := round(ln_vac_hours);

   return ln_vac_hours;
END GET_STORE_VAC_HOURS;

/*******************************************************************************
    Name         :   CREATE_US_VAC_PAYOUT
    Scope        :   GLOBAL
*******************************************************************************/
PROCEDURE CREATE_US_VAC_PAYOUT(p_person_id_o               in number
                              ,p_actual_termination_date_o in date
                              ,p_actual_termination_date   in date) IS

-- Cursor to get the Assignment ID
cursor c_get_asg_id(p_person_id number) is
select assignment_id
      ,ptp.start_date
  from per_all_assignments_f paf
      ,per_time_periods ptp
 where paf.person_id = p_person_id_o
   and paf.primary_flag = 'Y'
   and ptp.payroll_id = paf.payroll_id
   and p_actual_termination_date between ptp.start_date
                                     and ptp.end_date
   and p_actual_termination_date between paf.effective_start_date
                                     and paf.effective_end_date;

-- Cursor to Get the vacation plans attached to the employee
cursor c_get_vac_plan(cp_asg_id number) is
select pap.accrual_plan_id
      ,pap.accrual_plan_name
      ,paf.payroll_id
      ,paf.business_group_id
      ,paat.absence_attendance_type_id
  from pay_accrual_plans pap
      ,pay_element_entries_f peef
      ,per_all_assignments_f paf
      ,per_absence_attendance_types paat
 where paf.assignment_id = cp_asg_id
   and paf.primary_flag = 'Y'
   and peef.assignment_id = paf.assignment_id
   and pap.accrual_plan_element_type_id = peef.element_type_id
   and paat.input_value_id = pap.pto_input_value_id
   and p_actual_termination_date between peef.effective_start_date
                                     and peef.effective_end_date
   and p_actual_termination_date between paf.effective_start_date
                                     and paf.effective_end_date
   and pap.accrual_plan_name in ('WAG Vac Plan'
                                ,'Arbys Hourly Vac Plan');

   -- Cursor to Check whether Vacation Payout element entry exists
   cursor c_get_chk_ele_entry(cp_ele_type_id number
                             ,cp_asg_id      number
                             ,cp_eff_date    date) is
   select 'Exists'
     from pay_element_entries_f peef
    where peef.element_type_id = cp_ele_type_id
      and peef.assignment_id = cp_asg_id
      and cp_eff_date between peef.effective_start_date
                          and peef.effective_end_date;

   -- Cursor to Get Element Type ID
   cursor c_get_ele_type_id(cp_ele_name varchar2) is
   select element_type_id
     from pay_element_types_f
    where element_name = cp_ele_name
      and business_group_id = 0;

   -- Cursor to Get Input Value ID
   cursor c_get_inp_val_id(cp_ele_type_id  number
                          ,cp_inp_val_name varchar2
                          ,cp_eff_date     date) is
   select input_value_id
     from pay_input_values_f pivf
    where pivf.element_type_id = cp_ele_type_id
      and pivf.name = cp_inp_val_name
      and cp_eff_date between effective_start_date
                          and effective_end_date;

   ln_accr_plan_id       number;
   ln_payroll_id         number;
   ln_bus_grp_id         number;
   ln_accrual            number;
   ln_assignment_id      number;
   ln_ele_type_id        number;
   ln_ele_link_id        number;
   ln_elem_entry_id      number;
   ln_obj_vers_number    number;
   ln_hours_inp_val_id   number;
   ln_vac_po_ele_id      number;
   ln_effdate_inp_val_id number;
   ln_abs_att_type_id    number;
   ln_abs_att_id         number;
   ln_occurrence         number;
   ln_abs_days           number;
   ln_abs_hours          number;

   lv_accr_plan_name  varchar2(30);
   lv_vac_payout      varchar2(10);
   lv_ele_name        varchar2(30);
   lv_exists          varchar2(30);

   lb_dur_dys_less_warning      boolean;
   lb_dur_hrs_less_warning      boolean;
   lb_exceeds_pto_entit_warning boolean;
   lb_exceeds_run_total_warning boolean;
   lb_abs_overlap_warning       boolean;
   lb_abs_day_after_warning     boolean;
   lb_dur_overwritten_warning   boolean;
   lb_create_warning            boolean;

   ld_eff_start_date  date;
   ld_eff_end_date    date;
   ld_pd_start        date;


BEGIN

   open c_get_asg_id(p_person_id_o);
   fetch c_get_asg_id into ln_assignment_id
                          ,ld_pd_start;
   close c_get_asg_id;

   -- Check if employee is terminated now
   if p_actual_termination_date is not null
      and p_actual_termination_date_o is null then

      -- Get Vacation payout flag based on Employee termination reason
      -- and work location
      lv_vac_payout := XXARG_HR_PTO_PKG.IS_VAC_PAYOUT_ALL(
                                             ln_assignment_id
                                            ,p_actual_termination_date);

      -- Create Vacation payout element only if the State allows for the
      -- Termination reason for the employee
      if lv_vac_payout = 'Y' then

         -- Loop through Vacation Plans
         open c_get_vac_plan(ln_assignment_id);
         loop
            fetch c_get_vac_plan into ln_accr_plan_id
                                     ,lv_accr_plan_name
                                     ,ln_payroll_id
                                     ,ln_bus_grp_id
                                     ,ln_abs_att_type_id;
            exit when c_get_vac_plan%notfound;

            -- Get Net Accrual for creating the Vacation Payout element entry
            ln_accrual := per_utility_functions.get_net_accrual(
                                        ln_assignment_id
                                       ,ln_payroll_id
                                       ,ln_bus_grp_id
                                       ,-1
                                       ,p_actual_termination_date
                                       ,ln_accr_plan_id
                                       ,null
                                       ,null);

            if ln_accrual > 0 then
               ln_abs_hours := ln_accrual;

               -- Create absence to reduce accruals
               hr_person_absence_api.create_person_absence
                   (p_effective_date             => p_actual_termination_date
                   ,p_person_id                  => p_person_id_o
                   ,p_business_group_id          => ln_bus_grp_id
                   ,p_absence_attendance_type_id => ln_abs_att_type_id
                   ,p_date_start                 => ld_pd_start
                   ,p_date_end                   => p_actual_termination_date
                   ,p_absence_days               => ln_abs_days
                   ,p_absence_hours              => ln_abs_hours
                   ,p_absence_attendance_id      => ln_abs_att_id
                   ,p_object_version_number      => ln_obj_vers_number
                   ,p_occurrence                 => ln_occurrence
                   ,p_dur_dys_less_warning       => lb_dur_dys_less_warning
                   ,p_dur_hrs_less_warning       => lb_dur_hrs_less_warning
                   ,p_exceeds_pto_entit_warning  => lb_exceeds_pto_entit_warning
                   ,p_exceeds_run_total_warning  => lb_exceeds_run_total_warning
                   ,p_abs_overlap_warning        => lb_abs_overlap_warning
                   ,p_abs_day_after_warning      => lb_abs_day_after_warning
                   ,p_dur_overwritten_warning    => lb_dur_overwritten_warning);

               lv_ele_name := 'VAC';

               -- Get Element Type ID
               open c_get_ele_type_id(lv_ele_name);
               fetch c_get_ele_type_id into ln_ele_type_id;
               close c_get_ele_type_id;

               ln_ele_link_id := hr_entry_api.get_link
                       (p_assignment_id          => ln_assignment_id
                       ,p_element_type_id        => ln_ele_type_id
                       ,p_session_date           => p_actual_termination_date);


               -- Get Input Value ID
               open c_get_inp_val_id(ln_ele_type_id
                                   ,'Hours'
                                   ,p_actual_termination_date);
               fetch c_get_inp_val_id into ln_hours_inp_val_id;
               close c_get_inp_val_id;

               -- Create VAC Element Entry for payout
               pay_element_entry_api.create_element_entry
                        (p_validate              => FALSE
                        ,p_effective_date        => p_actual_termination_date
                        ,p_business_group_id     => ln_bus_grp_id
                        ,p_original_entry_id     => NULL
                        ,p_assignment_id         => ln_assignment_id
                        ,p_element_link_id       => ln_ele_link_id
                        ,p_entry_type            => 'E'
                        ,p_creator_type          => 'F'
                        ,p_date_earned           => null
                        ,p_input_value_id2       => ln_hours_inp_val_id
                        ,p_entry_value2          => ln_accrual
                        ,p_effective_start_date  => ld_eff_start_date
                        ,p_effective_end_date    => ld_eff_end_date
                        ,p_element_entry_id      => ln_elem_entry_id
                        ,p_object_version_number => ln_obj_vers_number
                        ,p_create_warning        => lb_create_warning
                        );

            end if;

         end loop;
         close c_get_vac_plan;
      end if; -- if lv_vac_payout

   end if; -- if p_actual_termination_date
EXCEPTION WHEN OTHERS THEN
   hr_utility.set_message(20003,'XXARG_HR_PTO_NO_VAC_PAYOUT');
   hr_utility.set_warning;

END CREATE_US_VAC_PAYOUT;

/*******************************************************************************
    Name         :   CREATE_CA_VAC_PAYOUT
    Scope        :   GLOBAL
*******************************************************************************/
PROCEDURE CREATE_CA_VAC_PAYOUT(p_person_id_o               in number
                              ,p_actual_termination_date_o in date
                              ,p_actual_termination_date   in date) IS

-- Cursor to get the Assignment ID
cursor c_get_asg_id(p_person_id number) is
select assignment_id
      ,ptp.start_date
  from per_all_assignments_f paf
      ,per_time_periods ptp
 where paf.person_id = p_person_id_o
   and paf.primary_flag = 'Y'
   and ptp.payroll_id = paf.payroll_id
   and p_actual_termination_date between ptp.start_date
                                     and ptp.end_date
   and p_actual_termination_date between paf.effective_start_date
                                     and paf.effective_end_date;

-- Cursor to Get the vacation plans attached to the employee
cursor c_get_vac_plan(cp_asg_id number) is
select pap.accrual_plan_id
      ,pap.accrual_plan_name
      ,paf.payroll_id
      ,paf.business_group_id
      ,paat.absence_attendance_type_id
  from pay_accrual_plans pap
      ,pay_element_entries_f peef
      ,per_all_assignments_f paf
      ,per_absence_attendance_types paat
 where paf.assignment_id = cp_asg_id
   and paf.primary_flag = 'Y'
   and peef.assignment_id = paf.assignment_id
   and pap.accrual_plan_element_type_id = peef.element_type_id
   and paat.input_value_id = pap.pto_input_value_id
   and p_actual_termination_date between peef.effective_start_date
                                     and peef.effective_end_date
   and p_actual_termination_date between paf.effective_start_date
                                     and paf.effective_end_date
   and pap.accrual_plan_name in ('WROC Vac Plan');

   -- Cursor to Check whether Vacation Payout element entry exists
   cursor c_get_chk_ele_entry(cp_ele_type_id number
                             ,cp_asg_id      number
                             ,cp_eff_date    date) is
   select 'Exists'
     from pay_element_entries_f peef
    where peef.element_type_id = cp_ele_type_id
      and peef.assignment_id = cp_asg_id
      and cp_eff_date between peef.effective_start_date
                          and peef.effective_end_date;

   -- Cursor to Get Element Type ID
   cursor c_get_ele_type_id(cp_ele_name varchar2) is
   select element_type_id
     from pay_element_types_f
    where element_name = cp_ele_name
      and business_group_id = 189;

   -- Cursor to Get Input Value ID
   cursor c_get_inp_val_id(cp_ele_type_id  number
                          ,cp_inp_val_name varchar2
                          ,cp_eff_date     date) is
   select input_value_id
     from pay_input_values_f pivf
    where pivf.element_type_id = cp_ele_type_id
      and pivf.name = cp_inp_val_name
      and cp_eff_date between effective_start_date
                          and effective_end_date;

   ln_accr_plan_id       number;
   ln_payroll_id         number;
   ln_bus_grp_id         number;
   ln_accrual            number;
   ln_assignment_id      number;
   ln_ele_type_id        number;
   ln_ele_link_id        number;
   ln_elem_entry_id      number;
   ln_abs_att_type_id    number;
   ln_abs_att_id         number;
   ln_obj_vers_number    number;
   ln_occurrence         number;
   ln_hours_inp_val_id   number;
   ln_vac_po_ele_id      number;
   ln_effdate_inp_val_id number;
   ln_abs_days           number;
   ln_abs_hours          number;

   lb_dur_dys_less_warning      boolean;
   lb_dur_hrs_less_warning      boolean;
   lb_exceeds_pto_entit_warning boolean;
   lb_exceeds_run_total_warning boolean;
   lb_abs_overlap_warning       boolean;
   lb_abs_day_after_warning     boolean;
   lb_dur_overwritten_warning   boolean;
   lb_create_warning            boolean;


   lv_accr_plan_name  varchar2(30);
   lv_vac_payout      varchar2(10);
   lv_ele_name        varchar2(30);
   lv_exists          varchar2(30);

   ld_eff_start_date  date;
   ld_eff_end_date    date;
   ld_pd_start        date;


BEGIN

   open c_get_asg_id(p_person_id_o);
   fetch c_get_asg_id into ln_assignment_id
                          ,ld_pd_start;
   close c_get_asg_id;

   -- Check if employee is terminated now
   if p_actual_termination_date is not null
      and p_actual_termination_date_o is null then

      -- Loop through Vacation Plans
      open c_get_vac_plan(ln_assignment_id);
      fetch c_get_vac_plan into ln_accr_plan_id
                               ,lv_accr_plan_name
                               ,ln_payroll_id
                               ,ln_bus_grp_id
                               ,ln_abs_att_type_id;
      close c_get_vac_plan;

      -- Get Net Accrual for creating the Vacation Payout element entry
      ln_accrual := per_utility_functions.get_net_accrual(
                                     ln_assignment_id
                                    ,ln_payroll_id
                                    ,ln_bus_grp_id
                                    ,-1
                                    ,p_actual_termination_date
                                    ,ln_accr_plan_id
                                    ,null
                                    ,null);


      if ln_accrual > 0 then
         ln_abs_hours := ln_accrual;

         -- Create absence to reduce the net accrual
         hr_person_absence_api.create_person_absence
                   (p_effective_date             => p_actual_termination_date
                   ,p_person_id                  => p_person_id_o
                   ,p_business_group_id          => ln_bus_grp_id
                   ,p_absence_attendance_type_id => ln_abs_att_type_id
                   ,p_date_start                 => ld_pd_start
                   ,p_date_end                   => p_actual_termination_date
                   ,p_absence_days               => ln_abs_days
                   ,p_absence_hours              => ln_abs_hours
                   ,p_absence_attendance_id      => ln_abs_att_id
                   ,p_object_version_number      => ln_obj_vers_number
                   ,p_occurrence                 => ln_occurrence
                   ,p_dur_dys_less_warning       => lb_dur_dys_less_warning
                   ,p_dur_hrs_less_warning       => lb_dur_hrs_less_warning
                   ,p_exceeds_pto_entit_warning  => lb_exceeds_pto_entit_warning
                   ,p_exceeds_run_total_warning  => lb_exceeds_run_total_warning
                   ,p_abs_overlap_warning        => lb_abs_overlap_warning
                   ,p_abs_day_after_warning      => lb_abs_day_after_warning
                   ,p_dur_overwritten_warning    => lb_dur_overwritten_warning);


         -- Create VTM element entry
         lv_ele_name := 'VTM';

         -- Get Element Type ID
         open c_get_ele_type_id(lv_ele_name);
         fetch c_get_ele_type_id into ln_ele_type_id;
         close c_get_ele_type_id;

         -- Check whether Element Entry exists
         open c_get_chk_ele_entry(ln_ele_type_id
                                 ,ln_assignment_id
                                 ,p_actual_termination_date);
         fetch c_get_chk_ele_entry into lv_exists;

         -- Call Accrual formula only if Payout Element entry does not
         -- exist
         if c_get_chk_ele_entry%NOTFOUND then
            close c_get_chk_ele_entry;


            ln_ele_link_id := hr_entry_api.get_link
                       (p_assignment_id          => ln_assignment_id
                       ,p_element_type_id        => ln_ele_type_id
                       ,p_session_date           => p_actual_termination_date);

            if ln_ele_link_id is null then
               hr_utility.set_message(20003,'XXARG_HR_CA_VTM_NOT_ELIG');
               hr_utility.set_warning;
            else
               -- Get Input Value ID
               open c_get_inp_val_id(ln_ele_type_id
                                   ,'Hours'
                                   ,p_actual_termination_date);
               fetch c_get_inp_val_id into ln_hours_inp_val_id;
               close c_get_inp_val_id;

               -- Create Payout element entry only if accrual is greater
               -- than ZERO
               if ln_accrual > 0 then

                  -- Create Element Entry for accrual
                  pay_element_entry_api.create_element_entry
                        (p_validate              => FALSE
                        ,p_effective_date        => p_actual_termination_date
                        ,p_business_group_id     => ln_bus_grp_id
                        ,p_original_entry_id     => NULL
                        ,p_assignment_id         => ln_assignment_id
                        ,p_element_link_id       => ln_ele_link_id
                        ,p_entry_type            => 'E'
                        ,p_creator_type          => 'F'
                        ,p_date_earned           => null
                        ,p_input_value_id2       => ln_hours_inp_val_id
                        ,p_entry_value2          => ln_accrual
                        ,p_effective_start_date  => ld_eff_start_date
                        ,p_effective_end_date    => ld_eff_end_date
                        ,p_element_entry_id      => ln_elem_entry_id
                        ,p_object_version_number => ln_obj_vers_number
                        ,p_create_warning        => lb_create_warning
                        );
               end if; -- if ln_accrual > 0
            end if; -- if ln_link_id is null
         else
            close c_get_chk_ele_entry;
            -- Set Warning that element entry already exists
            hr_utility.set_message(20003,'XXARG_HR_PTO_VAC_PAYOUT_EXISTS');
            hr_utility.set_warning;
         end if;

      else
         -- Create VAC element entry
         lv_ele_name := 'VAC';

         -- Get Element Type ID
         open c_get_ele_type_id(lv_ele_name);
         fetch c_get_ele_type_id into ln_ele_type_id;
         close c_get_ele_type_id;

         ln_ele_link_id := hr_entry_api.get_link
                       (p_assignment_id          => ln_assignment_id
                       ,p_element_type_id        => ln_ele_type_id
                       ,p_session_date           => p_actual_termination_date);

         -- Get Input Value ID
         open c_get_inp_val_id(ln_ele_type_id
                              ,'Hours'
                              ,p_actual_termination_date);
         fetch c_get_inp_val_id into ln_hours_inp_val_id;
         close c_get_inp_val_id;

         -- Create Element Entry for accrual
         pay_element_entry_api.create_element_entry
                        (p_validate              => FALSE
                        ,p_effective_date        => p_actual_termination_date
                        ,p_business_group_id     => ln_bus_grp_id
                        ,p_original_entry_id     => NULL
                        ,p_assignment_id         => ln_assignment_id
                        ,p_element_link_id       => ln_ele_link_id
                        ,p_entry_type            => 'E'
                        ,p_creator_type          => 'F'
                        ,p_date_earned           => null
                        ,p_input_value_id2       => ln_hours_inp_val_id
                        ,p_entry_value2          => ln_accrual
                        ,p_input_value_id10      => ln_effdate_inp_val_id
                        ,p_entry_value10         => TO_CHAR(p_actual_termination_date,'dd-mon-yyyy')
                        ,p_effective_start_date  => ld_eff_start_date
                        ,p_effective_end_date    => ld_eff_end_date
                        ,p_element_entry_id      => ln_elem_entry_id
                        ,p_object_version_number => ln_obj_vers_number
                        ,p_create_warning        => lb_create_warning
                        );

      end if;

   end if; -- if p_actual_termination_date
EXCEPTION WHEN OTHERS THEN
   hr_utility.set_message(20003,'XXARG_HR_PTO_NO_VAC_PAYOUT');
   hr_utility.set_warning;

END CREATE_CA_VAC_PAYOUT;

/*******************************************************************************
    Name         :   GET_WEEK_END_DATE
    Scope        :   GLOBAL
    Description  :   This procedure will be used to get the week end date
                     for the week.
*******************************************************************************/
FUNCTION GET_WEEK_END_DATE(p_payroll_id in number
                          ,p_eff_date   in date) return date IS
cursor c_get_pd_date(cp_pay_id   number
                    ,cp_eff_date date) is
select start_date
      ,end_date
  from per_time_periods ptp
 where ptp.payroll_id = cp_pay_id
   and cp_eff_date between ptp.start_date
                       and ptp.end_date;

   ld_start_date  date;
   ld_end_date    date;

   ld_wk_end_date date;

BEGIN

   -- Get Period Dates
   open c_get_pd_date(p_payroll_id
                     ,p_eff_date);
   fetch c_get_pd_date into ld_start_date
                           ,ld_end_date;
   close c_get_pd_date;

   -- Get Week End Date
   if ld_start_date + 6 >= p_eff_date then
      ld_wk_end_date := ld_start_date + 6;
   else
      ld_wk_end_date := ld_end_date;
   end if;

   return ld_wk_end_date;

END;

/*******************************************************************************
    Name         :   GET_HIRE_DATE
    Scope        :   GLOBAL
    Description  :   This procedure will be get the hire date that needs to be
                     used for length of service calculation.
*******************************************************************************/
FUNCTION GET_HIRE_DATE(p_assignment_id in number
                      ,p_eff_date      in date
                      ,p_bk_in_svc     in number) return date
IS

cursor c_get_cur_hire_date is
select ppos.date_start
      ,paf.person_id
  from per_periods_of_service ppos
      ,per_all_assignments_f paf
 where paf.assignment_id = p_assignment_id
   and paf.period_of_service_id = ppos.period_of_service_id
   and p_eff_date between paf.effective_start_date
                      and paf.effective_end_date;

cursor c_get_prev_term_date(cp_pers_id       number
                           ,cp_cur_hire_date date) is
select actual_termination_date
      ,date_start
  from per_periods_of_service
 where person_id = cp_pers_id
   and date_start < cp_cur_hire_date
order by date_start desc;

   ln_pers_id   number;

   ld_hire_date  date;
   ld_term_date  date;
   ld_phire_date date;
   ld_date       date;
   
BEGIN

   ld_term_date := null;

   open c_get_cur_hire_date;
   fetch c_get_cur_hire_date into ld_hire_date
                                 ,ln_pers_id;
   close c_get_cur_hire_date;

   -- Fetch termination date for the employment prior to the current one
   open c_get_prev_term_date(ln_pers_id
                            ,ld_hire_date);
   fetch c_get_prev_term_date into ld_term_date
                                  ,ld_phire_date;
   close c_get_prev_term_date;
   
   if ld_term_date is not null then
      ld_date := add_months(ld_term_date,3);
      
      if ld_date >= ld_hire_date then
         ld_hire_date := ld_phire_date;
      end if;
   end if;

   return ld_hire_date;
END GET_HIRE_DATE;

/*******************************************************************************
    Name         :   GET_TRUE_UP_AMT
    Scope        :   GLOBAL
    Description  :   This procedure will be get the true up amount that needs to
                     be paid
*******************************************************************************/
FUNCTION GET_TRUE_UP_AMT(pi_bus_grp_id  in number
                        ,pi_asg_id      in number
                        ,pi_pay_id      in number
                        ,pi_jur_code    in varchar2
                        ,pi_pd_str_date in date
                        ,pi_pd_end_date in date
                        ,pi_rate        in number
                        ,po_ytd_earn    out number
                        ,po_ytd_vac     out number
                        ,po_co          out number) return number
IS

-- Get Vacation plan
cursor c_get_vac_plan(cp_asg_id   number
                     ,cp_eff_date date) is
select pap.accrual_plan_id
  from pay_accrual_plans pap
      ,pay_element_entries_f peef
 where peef.assignment_id = cp_asg_id
   and pap.accrual_plan_element_type_id = peef.element_type_id
   and cp_eff_date between peef.effective_start_date
                       and peef.effective_end_date
   and pap.accrual_plan_name in ('WROC Vac Plan');

cursor c_get_2009_earn is
select nvl(sum(earnings),0)
  from xxarg.xxarg_hr_vtu_earnings xx
      ,per_all_assignments_f paf
      ,per_all_people_f papf
 where paf.assignment_id = pi_asg_id
   and papf.person_id = paf.person_id
   and xx.employee_number = papf.employee_number
   and pi_pd_end_date between papf.effective_start_date
                          and papf.effective_end_date
   and pi_pd_end_date between paf.effective_start_date
                          and paf.effective_end_date;

cursor c_get_2009_tak is
select nvl(sum(vac_taken),0)
  from xxarg.xxarg_hr_vtu_vac_taken xx
      ,per_all_assignments_f paf
      ,per_all_people_f papf
 where paf.assignment_id = pi_asg_id
   and papf.person_id = paf.person_id
   and xx.employee_number = papf.employee_number
   and pi_pd_end_date between papf.effective_start_date
                          and papf.effective_end_date
   and pi_pd_end_date between paf.effective_start_date
                          and paf.effective_end_date;

-- Get Hire Date
cursor c_get_cur_hire_date is
select ppos.date_start
      ,paf.normal_hours
  from per_periods_of_service ppos
      ,per_all_assignments_f paf
 where paf.assignment_id = pi_asg_id
   and paf.period_of_service_id = ppos.period_of_service_id
   and pi_pd_end_date between paf.effective_start_date
                          and paf.effective_end_date;

cursor c_get_pay_per(cp_str_date date
                    ,cp_end_date date) is
select count(*)
  from per_time_periods
 where payroll_id = pi_pay_id
   and end_date between cp_str_date
                    and cp_end_date;

   ln_accr_plan_id    number;
   ln_carryover       number;
   ln_yvac_taken      number;
   ln_yvac_taken_ps   number;
   ln_cvac_taken      number;
   ln_real_vac        number;
   ln_earn            number;
   ln_los_sy          number;
   ln_los_cur         number;
   ln_pc_cur          number;
   ln_pc_sy           number;
   ln_tot_pd          number;
   ln_nb_pd           number;
   ln_true_up         number;
   ln_norm_hours      number;
--   ln_rate            number;
   ln_tu_earn         number;
   ln_ytd_earn        number;
   ln_def_bal         number;
   
   lv_prov            varchar2(10);

   ld_yr_end_date     date;
   ld_hire_date       date;

BEGIN

   xxarg_hr_util_pkg.debug(gv_debug
                          ,gc_package_name || '.GET_TRUE_UP_AMT'
                          ,10);
   xxarg_hr_util_pkg.debug_message(gv_debug
                                  ,'Asg ID = ' || pi_asg_id);

   -- Set Local variables
   ld_yr_end_date := trunc(pi_pd_end_date,'Y') - 1;
   lv_prov        := substr(pi_jur_code,1,2);
   ln_ytd_earn    := 0;
   
   -- Get defined balance id
   ln_def_bal := xxarg_hr_util_pkg.get_defined_balance
                                        ('VAC Earn ' || upper(lv_prov)
                                        ,'ASG_YTD'
                                        ,'CA'
                                        ,pi_bus_grp_id);

   -- Get Year to Date balance value
   begin
      if (to_char(pi_pd_str_date,'RRRR') = 2009
          and to_char(pi_pd_end_date,'RRRR') = 2010 )then
         -- Get YTD earnings from staging table
         open c_get_2009_earn;
         fetch c_get_2009_earn into ln_ytd_earn;
         close c_get_2009_earn;
      else
         ln_ytd_earn := pay_balance_pkg.get_value(ln_def_bal
                                                 ,pi_asg_id
                                                 ,ld_yr_end_date);
      end if;
   exception when others then
      ln_ytd_earn := 0;
   end;


   xxarg_hr_util_pkg.debug_message(gv_debug
                                  ,'Year to Date Earn = ' || ln_ytd_earn);

   --- Logic
   -- Get Vacation taken for the complete year VT
   --    Get Carryover at the end of the crossover Period
   --    Get Vacation taken during the start of next year accrual period and
   --    Dec 31st VTCROSS
   --  Vacation realized by emp = VT + CO - VTCROSS

   -- Get Previous year earnings
   
   -- Get Vacation accrual plan id
   open c_get_vac_plan(pi_asg_id
                      ,pi_pd_end_date);
   fetch c_get_vac_plan into ln_accr_plan_id;
   close c_get_vac_plan;

   -- Get Yearly absence
   -- Vacation true up is paid in the crossover period
   -- Using Period Start date to determined the year
   xxarg_hr_util_pkg.debug(gv_debug
                          ,gc_package_name || '.GET_TRUE_UP_AMT'
                          ,20);

   -- Calculate Vacation taken
   if (to_char(pi_pd_str_date,'RRRR') = 2009
       and to_char(pi_pd_end_date,'RRRR') = 2010 )then
      -- Get Vacation Taken in PS from staging table
      open c_get_2009_tak;
      fetch c_get_2009_tak into ln_yvac_taken_ps;
      close c_get_2009_tak;

      xxarg_hr_util_pkg.debug_message(gv_debug
                                     ,'Vac Taken in PS = ' || ln_yvac_taken_ps);

      -- Get Vacation Taken in 2009 cross over period from Oracle
      ln_cvac_taken := per_accrual_calc_functions.get_absence
                               (pi_asg_id
                               ,ln_accr_plan_id
                               ,ld_yr_end_date
                               ,pi_pd_str_date);

      xxarg_hr_util_pkg.debug_message(gv_debug
                                     ,'Vac Taken in Oracle = ' || ln_yvac_taken);

      -- Calculate Vacation Taken in 2009
      ln_yvac_taken := ln_yvac_taken_ps + ln_cvac_taken;

   else
      -- Get Vacation Taken from Oracle
      ln_yvac_taken := per_accrual_calc_functions.get_absence
                               (pi_asg_id
                               ,ln_accr_plan_id
                               ,ld_yr_end_date
                               ,trunc(pi_pd_str_date,'Y'));
   end if; -- if (to_char(pi_pd_str_date,'RRRR') =

   xxarg_hr_util_pkg.debug_message(gv_debug
                                  ,'Asg ID = ' || pi_asg_id);
   xxarg_hr_util_pkg.debug_message(gv_debug
                                  ,'Accrual Plan ID = ' || ln_accr_plan_id);
   xxarg_hr_util_pkg.debug_message(gv_debug
                                  ,'Year End Date = ' || ld_yr_end_date);
   xxarg_hr_util_pkg.debug_message(gv_debug
                                  ,'Year Start Date = ' || trunc(pi_pd_str_date,'Y'));

   xxarg_hr_util_pkg.debug_message(gv_debug
                                  ,'Yearly Vac Taken = ' || ln_yvac_taken);
                                  

   -- Get absence in cross over period uptil end of year
   -- We need this to adjust the carryover to determined actual
   -- crossover
   xxarg_hr_util_pkg.debug(gv_debug
                          ,gc_package_name || '.GET_TRUE_UP_AMT'
                          ,30);

   ld_yr_end_date := trunc(pi_pd_end_date,'Y') - 1;
   ln_cvac_taken := per_accrual_calc_functions.get_absence
                               (pi_asg_id
                               ,ln_accr_plan_id
                               ,ld_yr_end_date
                               ,pi_pd_str_date);
   xxarg_hr_util_pkg.debug_message(gv_debug
                                  ,'Cross Over Vac Taken = ' || ln_cvac_taken);

   -- Get carryover at the end of cross over period
   xxarg_hr_util_pkg.debug(gv_debug
                          ,gc_package_name || '.GET_TRUE_UP_AMT'
                          ,40);
   ln_carryover := per_accrual_calc_functions.get_carry_over
                               (pi_asg_id
                               ,ln_accr_plan_id
                               ,pi_pd_end_date
                               ,pi_pd_str_date);

   xxarg_hr_util_pkg.debug_message(gv_debug
                                  ,'Carryover = ' || ln_carryover);

   -- If carryover amount was less than the vacation taken in the crossover
   -- period. Then actual carryover was 0. We do not want to reduce the realized
   -- vacation by the vacation taken in the crossover period
   -- Set both carryover and crossover vacation taken to 0.
   if ln_carryover < ln_cvac_taken then
      ln_carryover  := 0;
      ln_cvac_taken := 0;
   end if;

   -- Actual Vacation realized by employee in the year
   ln_real_vac  := ln_yvac_taken + ln_carryover - ln_cvac_taken;
   xxarg_hr_util_pkg.debug_message(gv_debug
                                  ,'Realized Vacation = ' || ln_real_vac);

   
   -- Get Hire Date
   xxarg_hr_util_pkg.debug(gv_debug
                          ,gc_package_name || '.GET_TRUE_UP_AMT'
                          ,50);
   open c_get_cur_hire_date;
   fetch c_get_cur_hire_date into ld_hire_date
                                 ,ln_norm_hours;
   close c_get_cur_hire_date;
   xxarg_hr_util_pkg.debug_message(gv_debug
                                  ,'Hire Date = ' || ld_hire_date);
   xxarg_hr_util_pkg.debug_message(gv_debug
                                  ,'Normal Hours = ' || ln_norm_hours);

   -- Calculate Length of Service
   ln_los_cur := months_between(pi_pd_end_date,ld_hire_date)/12;
   -- Set the length of service at start of year. If emplpoyee is hired after
   -- start of year, we can set it to LOS as of curr date
   if ld_hire_date > trunc(pi_pd_str_date,'Y') then
      ln_los_sy  := 0; --months_between(trunc(pi_pd_str_date,'Y'),ld_hire_date)/12;
   else
      ln_los_sy  := ln_los_cur;
   end if;

   xxarg_hr_util_pkg.debug_message(gv_debug
                                  ,'LOS = ' || ln_los_sy);

   -- Get percentages based on Current and Start of Year LOS
   ln_pc_cur   := xxarg_hr_util_pkg.get_user_table_value_for_range
                         ('WROC True Up Percentages'
                         ,'Percentage'
                         ,ln_los_cur
                         ,pi_pd_end_date);
   xxarg_hr_util_pkg.debug_message(gv_debug
                                  ,'PC Curr = ' || ln_pc_cur);

   ln_pc_sy     := xxarg_hr_util_pkg.get_user_table_value_for_range
                         ('WROC True Up Percentages'
                         ,'Percentage'
                         ,ln_los_sy
                         ,pi_pd_end_date);
   xxarg_hr_util_pkg.debug_message(gv_debug
                                  ,'PC Start of Year = ' || ln_pc_sy);

   if ln_los_cur <> ln_los_sy then
      -- Change in Band in the current year
      -- Calculate based on when the band changed
      
      -- Get total number of payroll periods
      open c_get_pay_per(trunc(pi_pd_str_date,'Y')
                        ,pi_pd_end_date);
      fetch c_get_pay_per into ln_tot_pd;
      close c_get_pay_per;

      -- Get Period count in new band 
      open c_get_pay_per(ld_hire_date
                        ,pi_pd_end_date);
      fetch c_get_pay_per into ln_nb_pd;
      close c_get_pay_per;
      
      
      ln_tu_earn := ((ln_ytd_earn * (ln_nb_pd/ln_tot_pd)) * ln_pc_cur/100)
                    + ((ln_ytd_earn * ((ln_tot_pd-ln_nb_pd)/ln_tot_pd)) * ln_pc_sy/100);
                    
   else
      ln_tu_earn := ln_ytd_earn * (ln_pc_cur/100);
   end if;

--   ln_rate := ln_ytd_earn/(ln_norm_hours*52);
   ln_true_up := ln_tu_earn - (ln_real_vac * pi_rate);


   xxarg_hr_util_pkg.debug_message(gv_debug,ln_real_vac);

   po_ytd_earn := ln_ytd_earn;
   po_ytd_vac  := ln_yvac_taken;
   po_co       := ln_carryover - ln_cvac_taken;

   xxarg_hr_util_pkg.debug_message(gv_debug
                                  ,'Rate = ' || pi_rate);
   xxarg_hr_util_pkg.debug_message(gv_debug
                                  ,'True Up Earn = ' || ln_tu_earn);
   xxarg_hr_util_pkg.debug_message(gv_debug
                                  ,'True Up = ' || ln_true_up);

   if ln_true_up < 0 then
      ln_true_up := 0;
   end if;
   
   xxarg_hr_util_pkg.debug(gv_debug
                          ,gc_package_name || '.GET_TRUE_UP_AMT'
                          ,100);

   return ln_true_up;


END GET_TRUE_UP_AMT;

/*******************************************************************************
    Name         :   GET_LOA_STATUS_IN_YEAR
    Scope        :   GLOBAL
    Description  :   This procedure will  get the true up amount that needs to
                     be paid
*******************************************************************************/
FUNCTION GET_LOA_STATUS_IN_YEAR(pi_asg_id   in number
                               ,pi_eff_date in date) return varchar2
IS

cursor c_get_loa(cp_eff_str_date date
                ,cp_eff_end_date date) is
select 'Exists'
  from per_assignment_status_types past
      ,per_all_assignments_f paf
 where paf.assignment_id = pi_asg_id
   and past.assignment_status_type_id = paf.assignment_status_type_id
   and (cp_eff_str_date between paf.effective_start_date
                            and paf.effective_end_date
        or
        cp_eff_end_date between paf.effective_start_date
                            and paf.effective_end_date
        or paf.effective_start_date between cp_eff_str_date
                                        and cp_eff_end_date)
   and past.user_status in ('LTD with Pay'
                           ,'Workers Comp'
                           ,'Workers Comp Modified'
                           ,'STD with Pay'
                           ,'Unpaid Disb (Mod-Not Wrk Rel)'
                           ,'Parental LOA'
                           ,'Compassionate Care Leave'
                           ,'Temporary Store Closure'
                           ,'Maternity - Extended Leave'
                           ,'STD Modified'
                           ,'LTD Modified');

   ld_start_date date;
   ld_end_date   date;
   
   lv_exists     varchar2(30);
   lv_loa        varchar2(1);

BEGIN
   ld_start_date := trunc(pi_eff_date,'Y');
   ld_end_date   := add_months(trunc(pi_eff_date,'Y'),12) - 1;
   lv_loa        := 'N';
   
   -- Check whether employee was on LOA status in the year
   open c_get_loa(ld_start_date
                 ,ld_end_date);
   fetch c_get_loa into lv_exists;
   if c_get_loa%found then
      lv_loa := 'Y';
   end if;
   close c_get_loa;
   
   return lv_loa;

END GET_LOA_STATUS_IN_YEAR;


/*******************************************************************************
    Name         :   PROCESS_YEAR_END_CARRYOVER_ADJ
    Scope        :   GLOBAL
    Description  :   This procedure will create the year end caryover adjustment
                     that will make sure that any holidays taken during the
                     cross over period are taken from the right bucket
*******************************************************************************/
PROCEDURE PROCESS_YEAR_END_CARRYOVER_ADJ(errbuf        OUT VARCHAR2
                                        ,retcode       OUT VARCHAR2
                                        ,pi_bus_grp_id in  number
                                        ,p_plan_id     in  number
                                        ,p_eff_date    in  varchar2) IS

cursor c_get_co_details(cp_eff_date date) is
select pivf.element_type_id
      ,pap.co_input_value_id
      ,pap.co_date_input_value_id
      ,pap.co_exp_date_input_value_id
      ,pap.residual_input_value_id
  from pay_accrual_plans pap
      ,pay_input_values_f pivf
 where pap.co_input_value_id = pivf.input_value_id
   and pap.accrual_plan_id = p_plan_id
   and cp_eff_date between pivf.effective_start_date
                       and pivf.effective_end_date;

-- Get Emplpoyees
cursor c_get_emp_res(cp_rs_iv    number
                    ,cp_eff_date date) is
select paf.assignment_id
      ,paf.assignment_number
      ,peev.screen_entry_value hours
      ,paf.payroll_id
      ,ptp.start_date
  from pay_element_entries_f peef
      ,pay_element_entry_values_f peev
      ,per_all_assignments_f paf
      ,per_time_periods ptp
 where peev.input_value_id = cp_rs_iv
   and peef.element_entry_id = peev.element_entry_id
   and peef.assignment_id = paf.assignment_id
   and ptp.payroll_id = paf.payroll_id
   and cp_eff_date between ptp.start_date
                       and ptp.end_date
   and cp_eff_date between peev.effective_start_date
                       and peev.effective_end_date
   and cp_eff_date between peef.effective_start_date
                       and peef.effective_end_date
   and cp_eff_date between paf.effective_start_date
                       and paf.effective_end_date;

-- Check Carryover Adj Element Entry Exists
cursor c_chk_elem_entry(cp_asg_id   number
                       ,cp_exp_iv   number
                       ,cp_exp_date date
                       ,cp_eff_date date) is
select 'Exists'
  from pay_element_entry_values_f peev
      ,pay_element_entries_f peef
 where peev.input_value_id = cp_exp_iv
   and peev.element_entry_id = peef.element_entry_id
   and peef.assignment_id = cp_asg_id
   and fnd_date.canonical_to_date(screen_entry_value) = cp_exp_date
   and cp_eff_date between peef.effective_start_date
                       and peef.effective_end_date
   and cp_eff_date between peev.effective_start_date
                       and peev.effective_end_date;

   ln_co_ele_type_id  number;
   ln_co_hours_iv     number;
   ln_co_date_iv      number;
   ln_co_exp_date_iv  number;
   ln_rs_iv           number;
   ln_ele_link_id     number;
   ln_elem_entry_id   number;
   ln_obj_vers_number number;

   ld_eff_date        date;
   ld_wk_end_date     date;
   ld_eff_start_date  date;
   ld_eff_end_date    date;
   
   lv_exists          varchar2(20);
   
   lb_create_warning  boolean;


   lc_get_emp_res     c_get_emp_res%ROWTYPE;
   

BEGIN
   xxarg_hr_util_pkg.debug(gv_debug
                          ,gc_package_name || '.PROCESS_YEAR_END_CARRYOVER_ADJ'
                          ,10);
   -- Convert Effective Date
   ld_eff_date := fnd_date.canonical_to_date(p_eff_date);
   
   -- Get Plan Carryover and Residula input values
   open c_get_co_details(ld_eff_date);
   fetch c_get_co_details into ln_co_ele_type_id
                              ,ln_co_hours_iv
                              ,ln_co_date_iv
                              ,ln_co_exp_date_iv
                              ,ln_rs_iv;
   close c_get_co_details;
   
   xxarg_hr_util_pkg.debug(gv_debug
                          ,gc_package_name || '.PROCESS_YEAR_END_CARRYOVER_ADJ'
                          ,20);


   xxarg_hr_util_pkg.debug_message(
                           gv_debug
                          ,'RS IV ID = ' || ln_rs_iv);

   xxarg_hr_util_pkg.debug_message(
                           gv_debug
                          ,'Eff Date = ' || ld_eff_date);

   -- Loop through employees for whome the extra carryover element needs to be
   -- created
   open c_get_emp_res(ln_rs_iv
                     ,ld_eff_date);
   loop
      fetch c_get_emp_res into lc_get_emp_res;
      exit when c_get_emp_res%notfound;
      
      xxarg_hr_util_pkg.debug_message(
                           gv_debug
                          ,'Assignment Number = ' || lc_get_emp_res.assignment_number);

      ld_wk_end_date := xxarg_hr_pto_pkg.get_week_end_date(
                                          lc_get_emp_res.payroll_id
                                         ,ld_eff_date);

      ln_ele_link_id := hr_entry_api.get_link
                       (p_assignment_id          => lc_get_emp_res.assignment_id
                       ,p_element_type_id        => ln_co_ele_type_id
                       ,p_session_date           => ld_eff_date);
                       

      open c_chk_elem_entry(lc_get_emp_res.assignment_id
                           ,ln_co_exp_date_iv
                           ,ld_wk_end_date
                           ,ld_eff_date);
      fetch c_chk_elem_entry into lv_exists;
      if c_chk_elem_entry%NOTFOUND then

         begin
           xxarg_hr_util_pkg.debug(gv_debug
                                  ,gc_package_name || '.PROCESS_YEAR_END_CARRYOVER_ADJ'
                                  ,30);

            -- Create Addl Carryover Element Entry for payout
            pay_element_entry_api.create_element_entry
                        (p_validate              => FALSE
                        ,p_effective_date        => ld_eff_date
                        ,p_business_group_id     => pi_bus_grp_id
                        ,p_original_entry_id     => NULL
                        ,p_assignment_id         => lc_get_emp_res.assignment_id
                        ,p_element_link_id       => ln_ele_link_id
                        ,p_entry_type            => 'E'
                        ,p_creator_type          => 'F'
                        ,p_date_earned           => null
                        ,p_input_value_id1       => ln_co_date_iv
                        ,p_entry_value1          => lc_get_emp_res.start_date
                        ,p_input_value_id2       => ln_co_exp_date_iv
                        ,p_entry_value2          => ld_wk_end_date
                        ,p_input_value_id4       => ln_co_hours_iv
                        ,p_entry_value4          => lc_get_emp_res.hours
                        ,p_effective_start_date  => ld_eff_start_date
                        ,p_effective_end_date    => ld_eff_end_date
                        ,p_element_entry_id      => ln_elem_entry_id
                        ,p_object_version_number => ln_obj_vers_number
                        ,p_create_warning        => lb_create_warning
                        );
         exception
            when others then
               null;
         end;
      end if;
      close c_chk_elem_entry;

   end loop;
   close c_get_emp_res;

   xxarg_hr_util_pkg.debug(gv_debug
                          ,gc_package_name || '.PROCESS_YEAR_END_CARRYOVER_ADJ'
                          ,40);

END PROCESS_YEAR_END_CARRYOVER_ADJ;

END XXARG_HR_PTO_PKG; 
